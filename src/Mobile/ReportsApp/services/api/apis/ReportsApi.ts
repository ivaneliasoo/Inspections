/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddNoteCommand,
    AddNoteCommandFromJSON,
    AddNoteCommandToJSON,
    CreateReportCommand,
    CreateReportCommandFromJSON,
    CreateReportCommandToJSON,
    EditNoteCommand,
    EditNoteCommandFromJSON,
    EditNoteCommandToJSON,
    EditPhotoRecordCommand,
    EditPhotoRecordCommandFromJSON,
    EditPhotoRecordCommandToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ReportQueryResult,
    ReportQueryResultFromJSON,
    ReportQueryResultToJSON,
    UpdateReportCommand,
    UpdateReportCommandFromJSON,
    UpdateReportCommandToJSON,
} from '../models';

export interface ExportRequest {
    id: number;
    printPhotos?: boolean;
}

export interface ApiReportsGetRequest {
    filter?: string;
    closed?: boolean;
    myReports?: boolean;
    orderBy?: string;
    descending?: boolean;
}

export interface ApiReportsIdDeleteRequest {
    id: number;
}

export interface ApiReportsIdGetRequest {
    id: number;
}

export interface ApiReportsIdNoteIdNoteDeleteRequest {
    id: number;
    idNote: number;
}

export interface ApiReportsIdNoteIdNotePutRequest {
    id: number;
    idNote: number;
    editNoteCommand?: EditNoteCommand;
}

export interface ApiReportsIdNotePostRequest {
    id: number;
    addNoteCommand?: AddNoteCommand;
}

export interface ApiReportsIdPhotorecordGetRequest {
    id: number;
}

export interface ApiReportsIdPhotorecordIdPhotoDeleteRequest {
    id: number;
    idPhoto: number;
}

export interface ApiReportsIdPhotorecordIdPhotoPutRequest {
    id: number;
    idPhoto: number;
    editPhotoRecordCommand?: EditPhotoRecordCommand;
}

export interface ApiReportsIdPhotorecordPostRequest {
    id: number;
    label?: string;
}

export interface ApiReportsIdPutRequest {
    id: string;
    updateReportCommand?: UpdateReportCommand;
}

export interface ApiReportsPostRequest {
    createReportCommand?: CreateReportCommand;
}

export interface BulkUpdateChecksRequest {
    reportId: number;
    checkListId: number;
    newValue?: number;
}

export interface CompleteReportRequest {
    reportId: number;
}

export interface UpdateFormRequest {
    id: number;
    idForm: number;
    body?: any | null;
}

/**
 * 
 */
export class ReportsApi extends runtime.BaseAPI {

    /**
     */
    async _exportRaw(requestParameters: ExportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _export.');
        }

        const queryParameters: any = {};

        if (requestParameters.printPhotos !== undefined) {
            queryParameters['printPhotos'] = requestParameters.printPhotos;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async _export(requestParameters: ExportRequest, initOverrides?: RequestInit): Promise<void> {
        await this._exportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsGetRaw(requestParameters: ApiReportsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReportQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.closed !== undefined) {
            queryParameters['closed'] = requestParameters.closed;
        }

        if (requestParameters.myReports !== undefined) {
            queryParameters['myReports'] = requestParameters.myReports;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.descending !== undefined) {
            queryParameters['descending'] = requestParameters.descending;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiReportsGet(requestParameters: ApiReportsGetRequest, initOverrides?: RequestInit): Promise<ReportQueryResult> {
       return await (await this.apiReportsGetRaw(requestParameters, initOverrides)).value();
    }

    /**
     */
    async apiReportsIdDeleteRaw(requestParameters: ApiReportsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdDelete(requestParameters: ApiReportsIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdGetRaw(requestParameters: ApiReportsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReportQueryResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportQueryResultFromJSON(jsonValue));
    }

    /**
     */
    async apiReportsIdGet(requestParameters: ApiReportsIdGetRequest, initOverrides?: RequestInit): Promise<ReportQueryResult> {
        const response = await this.apiReportsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiReportsIdNoteIdNoteDeleteRaw(requestParameters: ApiReportsIdNoteIdNoteDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdNoteIdNoteDelete.');
        }

        if (requestParameters.idNote === null || requestParameters.idNote === undefined) {
            throw new runtime.RequiredError('idNote','Required parameter requestParameters.idNote was null or undefined when calling apiReportsIdNoteIdNoteDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/note/{idNote}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idNote"}}`, encodeURIComponent(String(requestParameters.idNote))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdNoteIdNoteDelete(requestParameters: ApiReportsIdNoteIdNoteDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdNoteIdNoteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdNoteIdNotePutRaw(requestParameters: ApiReportsIdNoteIdNotePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdNoteIdNotePut.');
        }

        if (requestParameters.idNote === null || requestParameters.idNote === undefined) {
            throw new runtime.RequiredError('idNote','Required parameter requestParameters.idNote was null or undefined when calling apiReportsIdNoteIdNotePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/note/{idNote}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idNote"}}`, encodeURIComponent(String(requestParameters.idNote))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditNoteCommandToJSON(requestParameters.editNoteCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdNoteIdNotePut(requestParameters: ApiReportsIdNoteIdNotePutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdNoteIdNotePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdNotePostRaw(requestParameters: ApiReportsIdNotePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdNotePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/note`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteCommandToJSON(requestParameters.addNoteCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdNotePost(requestParameters: ApiReportsIdNotePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdNotePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdPhotorecordGetRaw(requestParameters: ApiReportsIdPhotorecordGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdPhotorecordGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/photorecord`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiReportsIdPhotorecordGet(requestParameters: ApiReportsIdPhotorecordGetRequest, initOverrides?: RequestInit): Promise<any> {
        return await (await this.apiReportsIdPhotorecordGetRaw(requestParameters, initOverrides)).value();
    }

    /**
     */
    async apiReportsIdPhotorecordIdPhotoDeleteRaw(requestParameters: ApiReportsIdPhotorecordIdPhotoDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdPhotorecordIdPhotoDelete.');
        }

        if (requestParameters.idPhoto === null || requestParameters.idPhoto === undefined) {
            throw new runtime.RequiredError('idPhoto','Required parameter requestParameters.idPhoto was null or undefined when calling apiReportsIdPhotorecordIdPhotoDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/photorecord/{idPhoto}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idPhoto"}}`, encodeURIComponent(String(requestParameters.idPhoto))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdPhotorecordIdPhotoDelete(requestParameters: ApiReportsIdPhotorecordIdPhotoDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdPhotorecordIdPhotoDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdPhotorecordIdPhotoPutRaw(requestParameters: ApiReportsIdPhotorecordIdPhotoPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdPhotorecordIdPhotoPut.');
        }

        if (requestParameters.idPhoto === null || requestParameters.idPhoto === undefined) {
            throw new runtime.RequiredError('idPhoto','Required parameter requestParameters.idPhoto was null or undefined when calling apiReportsIdPhotorecordIdPhotoPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/photorecord/{idPhoto}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idPhoto"}}`, encodeURIComponent(String(requestParameters.idPhoto))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditPhotoRecordCommandToJSON(requestParameters.editPhotoRecordCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdPhotorecordIdPhotoPut(requestParameters: ApiReportsIdPhotorecordIdPhotoPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdPhotorecordIdPhotoPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdPhotorecordPostRaw(requestParameters: ApiReportsIdPhotorecordPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdPhotorecordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.label !== undefined && requestParameters.label !== null) {
            headerParameters['label'] = String(requestParameters.label);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/photorecord`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdPhotorecordPost(requestParameters: ApiReportsIdPhotorecordPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdPhotorecordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsIdPutRaw(requestParameters: ApiReportsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiReportsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReportCommandToJSON(requestParameters.updateReportCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsIdPut(requestParameters: ApiReportsIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReportsPostRaw(requestParameters: ApiReportsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReportCommandToJSON(requestParameters.createReportCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReportsPost(requestParameters: ApiReportsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiReportsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bulkUpdateChecksRaw(requestParameters: BulkUpdateChecksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling bulkUpdateChecks.');
        }

        if (requestParameters.checkListId === null || requestParameters.checkListId === undefined) {
            throw new runtime.RequiredError('checkListId','Required parameter requestParameters.checkListId was null or undefined when calling bulkUpdateChecks.');
        }

        const queryParameters: any = {};

        if (requestParameters.newValue !== undefined) {
            queryParameters['newValue'] = requestParameters.newValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{reportId}/checklists/{checkListId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))).replace(`{${"checkListId"}}`, encodeURIComponent(String(requestParameters.checkListId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bulkUpdateChecks(requestParameters: BulkUpdateChecksRequest, initOverrides?: RequestInit): Promise<void> {
        await this.bulkUpdateChecksRaw(requestParameters, initOverrides);
    }

    /**
     */
    async completeReportRaw(requestParameters: CompleteReportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
            throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling completeReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{reportId}/complete`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async completeReport(requestParameters: CompleteReportRequest, initOverrides?: RequestInit): Promise<any> {
        return await (await this.completeReportRaw(requestParameters, initOverrides)).value();
    }

    /**
     */
    async updateFormRaw(requestParameters: UpdateFormRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateForm.');
        }

        if (requestParameters.idForm === null || requestParameters.idForm === undefined) {
            throw new runtime.RequiredError('idForm','Required parameter requestParameters.idForm was null or undefined when calling updateForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reports/{id}/forms/{idForm}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"idForm"}}`, encodeURIComponent(String(requestParameters.idForm))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateForm(requestParameters: UpdateFormRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateFormRaw(requestParameters, initOverrides);
    }

}
