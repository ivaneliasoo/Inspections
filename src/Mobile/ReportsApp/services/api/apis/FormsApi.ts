/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormDefinitionResponse,
    FormDefinitionResponseFromJSON,
    FormDefinitionResponseToJSON,
    NewFormDefinitionCommand,
    NewFormDefinitionCommandFromJSON,
    NewFormDefinitionCommandToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface AddFormDefinitionRequest {
    newFormDefinitionCommand?: NewFormDefinitionCommand;
}

export interface DeleteFormDefinitionRequest {
    id: number;
}

export interface GetFormDefinitionRequest {
    id: number;
}

export interface GetFormsDefinitionsRequest {
    filter?: string;
}

export interface UpdateFormDefinitionRequest {
    id: number;
    newFormDefinitionCommand?: NewFormDefinitionCommand;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     */
    async addFormDefinitionRaw(requestParameters: AddFormDefinitionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FormDefinitionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewFormDefinitionCommandToJSON(requestParameters.newFormDefinitionCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormDefinitionResponseFromJSON(jsonValue));
    }

    /**
     */
    async addFormDefinition(requestParameters: AddFormDefinitionRequest, initOverrides?: RequestInit): Promise<FormDefinitionResponse> {
        const response = await this.addFormDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFormDefinitionRaw(requestParameters: DeleteFormDefinitionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFormDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteFormDefinition(requestParameters: DeleteFormDefinitionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteFormDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getFormDefinitionRaw(requestParameters: GetFormDefinitionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFormDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getFormDefinition(requestParameters: GetFormDefinitionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getFormDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getFormsDefinitionsRaw(requestParameters: GetFormsDefinitionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FormDefinitionResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormDefinitionResponseFromJSON));
    }

    /**
     */
    async getFormsDefinitions(requestParameters: GetFormsDefinitionsRequest, initOverrides?: RequestInit): Promise<Array<FormDefinitionResponse>> {
        const response = await this.getFormsDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFormDefinitionRaw(requestParameters: UpdateFormDefinitionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFormDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewFormDefinitionCommandToJSON(requestParameters.newFormDefinitionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateFormDefinition(requestParameters: UpdateFormDefinitionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateFormDefinitionRaw(requestParameters, initOverrides);
    }

}
