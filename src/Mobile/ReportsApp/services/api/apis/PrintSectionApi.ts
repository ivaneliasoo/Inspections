/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddPrintSectionCommand,
    AddPrintSectionCommandFromJSON,
    AddPrintSectionCommandToJSON,
    EditPrintSectionCommand,
    EditPrintSectionCommandFromJSON,
    EditPrintSectionCommandToJSON,
    PrintSectionDto,
    PrintSectionDtoFromJSON,
    PrintSectionDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiPrintSectionGetRequest {
    filter?: string;
}

export interface ApiPrintSectionIdDeleteRequest {
    id: number;
}

export interface ApiPrintSectionIdGetRequest {
    id: number;
}

export interface ApiPrintSectionIdPutRequest {
    id: number;
    editPrintSectionCommand?: EditPrintSectionCommand;
}

export interface ApiPrintSectionPostRequest {
    addPrintSectionCommand?: AddPrintSectionCommand;
}

/**
 * 
 */
export class PrintSectionApi extends runtime.BaseAPI {

    /**
     */
    async apiPrintSectionGetRaw(requestParameters: ApiPrintSectionGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PrintSectionDto>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PrintSection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrintSectionDtoFromJSON));
    }

    /**
     */
    async apiPrintSectionGet(requestParameters: ApiPrintSectionGetRequest, initOverrides?: RequestInit): Promise<Array<PrintSectionDto>> {
        const response = await this.apiPrintSectionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPrintSectionIdDeleteRaw(requestParameters: ApiPrintSectionIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPrintSectionIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PrintSection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPrintSectionIdDelete(requestParameters: ApiPrintSectionIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiPrintSectionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPrintSectionIdGetRaw(requestParameters: ApiPrintSectionIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPrintSectionIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PrintSection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPrintSectionIdGet(requestParameters: ApiPrintSectionIdGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiPrintSectionIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPrintSectionIdPutRaw(requestParameters: ApiPrintSectionIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPrintSectionIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PrintSection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditPrintSectionCommandToJSON(requestParameters.editPrintSectionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPrintSectionIdPut(requestParameters: ApiPrintSectionIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiPrintSectionIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPrintSectionPostRaw(requestParameters: ApiPrintSectionPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/PrintSection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPrintSectionCommandToJSON(requestParameters.addPrintSectionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPrintSectionPost(requestParameters: ApiPrintSectionPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiPrintSectionPostRaw(requestParameters, initOverrides);
    }

}
