/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Address,
    AddressFromJSON,
    AddressToJSON,
    AddressDto,
    AddressDtoFromJSON,
    AddressDtoToJSON,
    NewAddressDto,
    NewAddressDtoFromJSON,
    NewAddressDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface AddAddressRequest {
    newAddressDto?: NewAddressDto;
}

export interface ApiAddressesIdGetRequest {
    id: number;
}

export interface DeleteAddressRequest {
    id: number;
}

export interface GetAddressesRequest {
    filter?: string;
}

export interface UpdateAddressRequest {
    id: number;
    newAddressDto?: NewAddressDto;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     */
    async addAddressRaw(requestParameters: AddAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Address>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAddressDtoToJSON(requestParameters.newAddressDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async addAddress(requestParameters: AddAddressRequest, initOverrides?: RequestInit): Promise<Address> {
        const response = await this.addAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressesIdGetRaw(requestParameters: ApiAddressesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAddressesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressesIdGet(requestParameters: ApiAddressesIdGetRequest, initOverrides?: RequestInit): Promise<AddressDto> {
        const response = await this.apiAddressesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAddressRaw(requestParameters: DeleteAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AddressDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteAddress(requestParameters: DeleteAddressRequest, initOverrides?: RequestInit): Promise<AddressDto> {
        const response = await this.deleteAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAddressesRaw(requestParameters: GetAddressesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AddressDto>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressDtoFromJSON));
    }

    /**
     */
    async getAddresses(requestParameters: GetAddressesRequest, initOverrides?: RequestInit): Promise<Array<AddressDto>> {
        const response = await this.getAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAddressRaw(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewAddressDtoToJSON(requestParameters.newAddressDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAddress(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateAddressRaw(requestParameters, initOverrides);
    }

}
