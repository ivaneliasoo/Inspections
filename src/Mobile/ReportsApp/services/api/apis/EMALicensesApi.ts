/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EMALicense,
    EMALicenseFromJSON,
    EMALicenseToJSON,
    LicenseDTO,
    LicenseDTOFromJSON,
    LicenseDTOToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface AddLicenseRequest {
    licenseDTO?: LicenseDTO;
}

export interface DeleteLicenseRequest {
    id: number;
}

export interface GetLicenseRequest {
    id: number;
}

export interface UpdateLicenseRequest {
    id: number;
    licenseDTO?: LicenseDTO;
}

/**
 * 
 */
export class EMALicensesApi extends runtime.BaseAPI {

    /**
     */
    async addLicenseRaw(requestParameters: AddLicenseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EMALicense>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LicenseDTOToJSON(requestParameters.licenseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EMALicenseFromJSON(jsonValue));
    }

    /**
     */
    async addLicense(requestParameters: AddLicenseRequest, initOverrides?: RequestInit): Promise<EMALicense> {
        const response = await this.addLicenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLicenseRaw(requestParameters: DeleteLicenseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EMALicense>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLicense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EMALicenseFromJSON(jsonValue));
    }

    /**
     */
    async deleteLicense(requestParameters: DeleteLicenseRequest, initOverrides?: RequestInit): Promise<EMALicense> {
        const response = await this.deleteLicenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLicenseRaw(requestParameters: GetLicenseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LicenseDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLicense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getLicense(requestParameters: GetLicenseRequest, initOverrides?: RequestInit): Promise<LicenseDTO> {
        const response = await this.getLicenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLicensesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getLicenses(initOverrides?: RequestInit): Promise<void> {
        await this.getLicensesRaw(initOverrides);
    }

    /**
     */
    async getLicensesDashboardRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LicenseDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LicenseDTOFromJSON));
    }

    /**
     */
    async getLicensesDashboard(initOverrides?: RequestInit): Promise<Array<LicenseDTO>> {
        const response = await this.getLicensesDashboardRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLicenseRaw(requestParameters: UpdateLicenseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLicense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/EMALicenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LicenseDTOToJSON(requestParameters.licenseDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateLicense(requestParameters: UpdateLicenseRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateLicenseRaw(requestParameters, initOverrides);
    }

}
