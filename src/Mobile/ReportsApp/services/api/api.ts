/* tslint:disable */
/* eslint-disable */
/**
 * Inspections API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddCheckListCommand
 */
export interface AddCheckListCommand {
    /**
     * 
     * @type {string}
     * @memberof AddCheckListCommand
     */
    text?: string | null;
    /**
     * 
     * @type {Array<CheckListItemDTO>}
     * @memberof AddCheckListCommand
     */
    items?: Array<CheckListItemDTO> | null;
    /**
     * 
     * @type {string}
     * @memberof AddCheckListCommand
     */
    annotation?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AddCheckListCommand
     */
    isConfiguration?: boolean;
}
/**
 * 
 * @export
 * @interface AddCheckListItemCommand
 */
export interface AddCheckListItemCommand {
    /**
     * 
     * @type {number}
     * @memberof AddCheckListItemCommand
     */
    idCheckList?: number;
    /**
     * 
     * @type {string}
     * @memberof AddCheckListItemCommand
     */
    text?: string | null;
    /**
     * 
     * @type {CheckValue}
     * @memberof AddCheckListItemCommand
     */
    checked?: CheckValue;
    /**
     * 
     * @type {boolean}
     * @memberof AddCheckListItemCommand
     */
    editable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AddCheckListItemCommand
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddCheckListItemCommand
     */
    remarks?: string | null;
}
/**
 * 
 * @export
 * @interface AddNoteCommand
 */
export interface AddNoteCommand {
    /**
     * 
     * @type {number}
     * @memberof AddNoteCommand
     */
    reportId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddNoteCommand
     */
    text?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AddNoteCommand
     */
    checked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AddNoteCommand
     */
    needsCheck?: boolean;
}
/**
 * 
 * @export
 * @interface AddReportConfigurationCommand
 */
export interface AddReportConfigurationCommand {
    /**
     * 
     * @type {ReportType}
     * @memberof AddReportConfigurationCommand
     */
    type?: ReportType;
    /**
     * 
     * @type {string}
     * @memberof AddReportConfigurationCommand
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddReportConfigurationCommand
     */
    formName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddReportConfigurationCommand
     */
    remarksLabelText?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AddReportConfigurationCommand
     */
    checksDefinition?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AddReportConfigurationCommand
     */
    signatureDefinitions?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface AddSignatureCommand
 */
export interface AddSignatureCommand {
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    annotation?: string | null;
    /**
     * 
     * @type {ResponsibleType}
     * @memberof AddSignatureCommand
     */
    responsableType?: ResponsibleType;
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    responsibleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    designation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    remarks?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddSignatureCommand
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddSignatureCommand
     */
    principal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AddSignatureCommand
     */
    isConfiguration?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AddSignatureCommand
     */
    reportId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AddSignatureCommand
     */
    reportConfigurationId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AddSignatureCommand
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    id?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Address
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLine?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    unit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    licenseId?: number;
    /**
     * 
     * @type {EMALicense}
     * @memberof Address
     */
    license?: EMALicense;
}
/**
 * 
 * @export
 * @interface AddressDTO
 */
export interface AddressDTO {
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    addressLine?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    unit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    postalCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    licenseId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    number?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    amp?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    volt?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    kva?: number;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof AddressDTO
     */
    validity?: DateTimeRange;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    formatedAddress?: string | null;
}
/**
 * 
 * @export
 * @interface ChangePasswordDTO
 */
export interface ChangePasswordDTO {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDTO
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDTO
     */
    currentPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDTO
     */
    newPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDTO
     */
    newPasswordConfirmation?: string | null;
}
/**
 * 
 * @export
 * @interface CheckListItemDTO
 */
export interface CheckListItemDTO {
    /**
     * 
     * @type {number}
     * @memberof CheckListItemDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckListItemDTO
     */
    checkListId?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckListItemDTO
     */
    text?: string | null;
    /**
     * 
     * @type {CheckValue}
     * @memberof CheckListItemDTO
     */
    checked?: CheckValue;
    /**
     * 
     * @type {boolean}
     * @memberof CheckListItemDTO
     */
    editable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CheckListItemDTO
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckListItemDTO
     */
    remarks?: string | null;
}
/**
 * 
 * @export
 * @interface CheckListItemQueryResult
 */
export interface CheckListItemQueryResult {
    /**
     * 
     * @type {number}
     * @memberof CheckListItemQueryResult
     */
    checkListId?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckListItemQueryResult
     */
    checked?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CheckListItemQueryResult
     */
    editable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CheckListItemQueryResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckListItemQueryResult
     */
    remarks?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CheckListItemQueryResult
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckListItemQueryResult
     */
    text?: string | null;
}
/**
 * 
 * @export
 * @interface CheckListQueryResult
 */
export interface CheckListQueryResult {
    /**
     * 
     * @type {number}
     * @memberof CheckListQueryResult
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckListQueryResult
     */
    reportId?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckListQueryResult
     */
    text?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CheckListQueryResult
     */
    annotation?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CheckListQueryResult
     */
    checked?: boolean;
    /**
     * 
     * @type {Array<CheckListItemQueryResult>}
     * @memberof CheckListQueryResult
     */
    checks?: Array<CheckListItemQueryResult> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CheckValue {
    NotAcceptable = 0,
    Acceptable = 1,
    NotAplicable = 2,
    None = 3
}

/**
 * 
 * @export
 * @interface CreateReportCommand
 */
export interface CreateReportCommand {
    /**
     * 
     * @type {number}
     * @memberof CreateReportCommand
     */
    configurationId?: number;
    /**
     * 
     * @type {ReportType}
     * @memberof CreateReportCommand
     */
    reportType?: ReportType;
}
/**
 * 
 * @export
 * @interface DateTimeRange
 */
export interface DateTimeRange {
    /**
     * 
     * @type {string}
     * @memberof DateTimeRange
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeRange
     */
    end?: string;
}
/**
 * 
 * @export
 * @interface EMALicense
 */
export interface EMALicense {
    /**
     * 
     * @type {number}
     * @memberof EMALicense
     */
    id?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof EMALicense
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof EMALicense
     */
    number?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EMALicense
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EMALicense
     */
    personInCharge?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EMALicense
     */
    contact?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EMALicense
     */
    email?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EMALicense
     */
    amp?: number;
    /**
     * 
     * @type {number}
     * @memberof EMALicense
     */
    volt?: number;
    /**
     * 
     * @type {number}
     * @memberof EMALicense
     */
    kva?: number;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof EMALicense
     */
    validity?: DateTimeRange;
}
/**
 * 
 * @export
 * @interface EditNoteCommand
 */
export interface EditNoteCommand {
    /**
     * 
     * @type {number}
     * @memberof EditNoteCommand
     */
    reportId?: number;
    /**
     * 
     * @type {number}
     * @memberof EditNoteCommand
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EditNoteCommand
     */
    text?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EditNoteCommand
     */
    checked?: boolean;
}
/**
 * 
 * @export
 * @interface EditPhotoRecordCommand
 */
export interface EditPhotoRecordCommand {
    /**
     * 
     * @type {number}
     * @memberof EditPhotoRecordCommand
     */
    reportId?: number;
    /**
     * 
     * @type {number}
     * @memberof EditPhotoRecordCommand
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoRecordCommand
     */
    label?: string | null;
}
/**
 * 
 * @export
 * @interface EditSignatureCommand
 */
export interface EditSignatureCommand {
    /**
     * 
     * @type {number}
     * @memberof EditSignatureCommand
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    annotation?: string | null;
    /**
     * 
     * @type {ResponsibleType}
     * @memberof EditSignatureCommand
     */
    responsibleType?: ResponsibleType;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    responsibleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    designation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    remarks?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditSignatureCommand
     */
    principal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EditSignatureCommand
     */
    drawnSign?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EditSignatureCommand
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface LicenseDTO
 */
export interface LicenseDTO {
    /**
     * 
     * @type {number}
     * @memberof LicenseDTO
     */
    licenseId?: number;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    number?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    personInCharge?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    contact?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    email?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LicenseDTO
     */
    amp?: number;
    /**
     * 
     * @type {number}
     * @memberof LicenseDTO
     */
    volt?: number;
    /**
     * 
     * @type {number}
     * @memberof LicenseDTO
     */
    kva?: number;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    validityStart?: string;
    /**
     * 
     * @type {string}
     * @memberof LicenseDTO
     */
    validityEnd?: string;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}
/**
 * 
 * @export
 * @interface ReportConfigurationDTO
 */
export interface ReportConfigurationDTO {
    /**
     * 
     * @type {number}
     * @memberof ReportConfigurationDTO
     */
    id?: number;
    /**
     * 
     * @type {ReportType}
     * @memberof ReportConfigurationDTO
     */
    type?: ReportType;
    /**
     * 
     * @type {string}
     * @memberof ReportConfigurationDTO
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportConfigurationDTO
     */
    formName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportConfigurationDTO
     */
    remarksLabelText?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ReportConfigurationDTO
     */
    checksDefinition?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ReportConfigurationDTO
     */
    signatureDefinitions?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface ReportQueryResult
 */
export interface ReportQueryResult {
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    date?: string | Date;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    licenseNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    licenseName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    licenseKVA?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    licenseVolt?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    licenseAmp?: number | null;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof ReportQueryResult
     */
    licenseValidity?: DateTimeRange;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    formName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportQueryResult
     */
    remarksLabelText?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsId?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL1N?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL2N?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL3N?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL1L2?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL1L3?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsVoltageL2L3?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsRunningLoadL1?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsRunningLoadL2?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsRunningLoadL3?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsMainBreakerAmp?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsMainBreakerPoles?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsMainBreakerCapacity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReportQueryResult
     */
    operationalReadingsOverCurrentByMainBreaker?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsOverCurrentDTLA?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsOverCurrentDTLSec?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsOverCurrentIDMTLA?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsOverCurrentIDMTLTm?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsEarthFaultMA?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsEarthFaultELRA?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsEarthFaultELRSec?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsEarthFaultA?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportQueryResult
     */
    operationalReadingsEarthFaultSec?: number;
    /**
     * 
     * @type {Array<SignatureQueryResult>}
     * @memberof ReportQueryResult
     */
    signatures?: Array<SignatureQueryResult> | null;
    /**
     * 
     * @type {Array<CheckListQueryResult>}
     * @memberof ReportQueryResult
     */
    checkLists?: Array<CheckListQueryResult> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ReportType {
    NUMBER_0 = 0
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ResponsibleType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}

/**
 * 
 * @export
 * @interface ResumenReportConfiguration
 */
export interface ResumenReportConfiguration {
    /**
     * 
     * @type {number}
     * @memberof ResumenReportConfiguration
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ResumenReportConfiguration
     */
    type?: number;
    /**
     * 
     * @type {string}
     * @memberof ResumenReportConfiguration
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumenReportConfiguration
     */
    formName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumenReportConfiguration
     */
    remarksLabelText?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ResumenReportConfiguration
     */
    definedCheckLists?: number;
    /**
     * 
     * @type {number}
     * @memberof ResumenReportConfiguration
     */
    definedSignatures?: number;
    /**
     * 
     * @type {number}
     * @memberof ResumenReportConfiguration
     */
    usedByReports?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ResumenReportConfiguration
     */
    inactive?: boolean;
}
/**
 * 
 * @export
 * @interface SignatureDTO
 */
export interface SignatureDTO {
    /**
     * 
     * @type {number}
     * @memberof SignatureDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    annotation?: string | null;
    /**
     * 
     * @type {ResponsibleType}
     * @memberof SignatureDTO
     */
    responsableType?: ResponsibleType;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    responsableName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    designation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    remarks?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureDTO
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SignatureDTO
     */
    principal?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SignatureDTO
     */
    reportId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SignatureDTO
     */
    reportConfigurationId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SignatureDTO
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface SignatureQueryResult
 */
export interface SignatureQueryResult {
    /**
     * 
     * @type {number}
     * @memberof SignatureQueryResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    annotation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    designation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    drawnSign?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SignatureQueryResult
     */
    principal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    remarks?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SignatureQueryResult
     */
    responsibleType?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    responsibleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignatureQueryResult
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SignatureQueryResult
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface UpdateCheckListCommand
 */
export interface UpdateCheckListCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateCheckListCommand
     */
    idCheckList?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCheckListCommand
     */
    text?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCheckListCommand
     */
    annotation?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCheckListCommand
     */
    isConfiguration?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateCheckListItemCommand
 */
export interface UpdateCheckListItemCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateCheckListItemCommand
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCheckListItemCommand
     */
    checkListId?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCheckListItemCommand
     */
    text?: string | null;
    /**
     * 
     * @type {CheckValue}
     * @memberof UpdateCheckListItemCommand
     */
    checked?: CheckValue;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCheckListItemCommand
     */
    editable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCheckListItemCommand
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateCheckListItemCommand
     */
    remarks?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateOperationalReadingsCommand
 */
export interface UpdateOperationalReadingsCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    reportId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL1N?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL2N?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL3N?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL1L2?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL1L3?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    voltageL2L3?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    runningLoadL1?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    runningLoadL2?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    runningLoadL3?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    mainBreakerAmp?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    mainBreakerPoles?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    mainBreakerCapacity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOperationalReadingsCommand
     */
    overCurrentByMainBreaker?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    overCurrentDTLA?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    overCurrentDTLSec?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    overCurrentIDMTLA?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    overCurrentIDMTLTm?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    earthFaultMA?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    earthFaultELRA?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    earthFaultELRSec?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    earthFaultA?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOperationalReadingsCommand
     */
    earthFaultSec?: number;
}
/**
 * 
 * @export
 * @interface UpdateReportCommand
 */
export interface UpdateReportCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateReportCommand
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportCommand
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportCommand
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportCommand
     */
    licenseNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportCommand
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateReportCommand
     */
    isClosed?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateReportConfigurationCommand
 */
export interface UpdateReportConfigurationCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateReportConfigurationCommand
     */
    id?: number;
    /**
     * 
     * @type {ReportType}
     * @memberof UpdateReportConfigurationCommand
     */
    type?: ReportType;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportConfigurationCommand
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportConfigurationCommand
     */
    formName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportConfigurationCommand
     */
    remarksLabelText?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateReportConfigurationCommand
     */
    checksDefinition?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateReportConfigurationCommand
     */
    signatureDefinitions?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    lastEditedReport?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isAdmin?: boolean;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    lastName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    lastEditedReport?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserDTO
     */
    isAdmin?: boolean;
}

/**
 * AddressesApi - axios parameter creator
 * @export
 */
export const AddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress: async (addressDTO?: AddressDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressesIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressesIdGet', 'id', id)
            const localVarPath = `/Addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAddress', 'id', id)
            const localVarPath = `/Addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses: async (filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (id: number, addressDTO?: AddressDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAddress', 'id', id)
            const localVarPath = `/Addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAddress(addressDTO?: AddressDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Address>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAddress(addressDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressesIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAddress(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAddress(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddresses(filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddresses(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(id: number, addressDTO?: AddressDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(id, addressDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressesApiFp(configuration)
    return {
        /**
         * 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addressDTO?: AddressDTO, options?: any): AxiosPromise<Address> {
            return localVarFp.addAddress(addressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressesIdGet(id: number, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.addressesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(id: number, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.deleteAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(filter?: string, options?: any): AxiosPromise<Array<AddressDTO>> {
            return localVarFp.getAddresses(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} [addressDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(id: number, addressDTO?: AddressDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateAddress(id, addressDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
    /**
     * 
     * @param {AddressDTO} [addressDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public addAddress(addressDTO?: AddressDTO, options?: any) {
        return AddressesApiFp(this.configuration).addAddress(addressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public addressesIdGet(id: number, options?: any) {
        return AddressesApiFp(this.configuration).addressesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public deleteAddress(id: number, options?: any) {
        return AddressesApiFp(this.configuration).deleteAddress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public getAddresses(filter?: string, options?: any) {
        return AddressesApiFp(this.configuration).getAddresses(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AddressDTO} [addressDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public updateAddress(id: number, addressDTO?: AddressDTO, options?: any) {
        return AddressesApiFp(this.configuration).updateAddress(id, addressDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates a JWT token for use in api call
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginModel?: LoginModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates a JWT token for use in api call
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginModel?: LoginModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates a JWT token for use in api call
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginModel?: LoginModel, options?: any): AxiosPromise<void> {
            return localVarFp.login(loginModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Generates a JWT token for use in api call
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginModel?: LoginModel, options?: any) {
        return AuthApiFp(this.configuration).login(loginModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CheckListsApi - axios parameter creator
 * @export
 */
export const CheckListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {AddCheckListItemCommand} [addCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToChecklist: async (id: number, addCheckListItemCommand?: AddCheckListItemCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addItemToChecklist', 'id', id)
            const localVarPath = `/CheckLists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCheckListItemCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddCheckListCommand} [addCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckList: async (addCheckListCommand?: AddCheckListCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CheckLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCheckListCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklist: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChecklist', 'id', id)
            const localVarPath = `/CheckLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklistItem: async (id: number, idItem: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChecklistItem', 'id', id)
            // verify required parameter 'idItem' is not null or undefined
            assertParamExists('deleteChecklistItem', 'idItem', idItem)
            const localVarPath = `/CheckLists/{id}/items/{idItem}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idItem"}}`, encodeURIComponent(String(idItem)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckListbyId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCheckListbyId', 'id', id)
            const localVarPath = `/CheckLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklists: async (filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/CheckLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (reportConfigurationId !== undefined) {
                localVarQueryParameter['reportConfigurationId'] = reportConfigurationId;
            }

            if (reportId !== undefined) {
                localVarQueryParameter['reportId'] = reportId;
            }

            if (inConfigurationOnly !== undefined) {
                localVarQueryParameter['inConfigurationOnly'] = inConfigurationOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCheckListCommand} [updateCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklist: async (id: number, updateCheckListCommand?: UpdateCheckListCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChecklist', 'id', id)
            const localVarPath = `/CheckLists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCheckListCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {UpdateCheckListItemCommand} [updateCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistItem: async (id: number, idItem: number, updateCheckListItemCommand?: UpdateCheckListItemCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChecklistItem', 'id', id)
            // verify required parameter 'idItem' is not null or undefined
            assertParamExists('updateChecklistItem', 'idItem', idItem)
            const localVarPath = `/CheckLists/{id}/items/{idItem}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idItem"}}`, encodeURIComponent(String(idItem)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCheckListItemCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckListsApi - functional programming interface
 * @export
 */
export const CheckListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {AddCheckListItemCommand} [addCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItemToChecklist(id: number, addCheckListItemCommand?: AddCheckListItemCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addItemToChecklist(id, addCheckListItemCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddCheckListCommand} [addCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckList(addCheckListCommand?: AddCheckListCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckList(addCheckListCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChecklist(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChecklist(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChecklistItem(id: number, idItem: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChecklistItem(id, idItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckListbyId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckListbyId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChecklists(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChecklists(filter, reportConfigurationId, reportId, inConfigurationOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCheckListCommand} [updateCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklist(id: number, updateCheckListCommand?: UpdateCheckListCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklist(id, updateCheckListCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {UpdateCheckListItemCommand} [updateCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistItem(id: number, idItem: number, updateCheckListItemCommand?: UpdateCheckListItemCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistItem(id, idItem, updateCheckListItemCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckListsApi - factory interface
 * @export
 */
export const CheckListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckListsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {AddCheckListItemCommand} [addCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToChecklist(id: number, addCheckListItemCommand?: AddCheckListItemCommand, options?: any): AxiosPromise<void> {
            return localVarFp.addItemToChecklist(id, addCheckListItemCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddCheckListCommand} [addCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckList(addCheckListCommand?: AddCheckListCommand, options?: any): AxiosPromise<void> {
            return localVarFp.createCheckList(addCheckListCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklist(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteChecklist(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklistItem(id: number, idItem: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteChecklistItem(id, idItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckListbyId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.getCheckListbyId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklists(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.getChecklists(filter, reportConfigurationId, reportId, inConfigurationOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCheckListCommand} [updateCheckListCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklist(id: number, updateCheckListCommand?: UpdateCheckListCommand, options?: any): AxiosPromise<void> {
            return localVarFp.updateChecklist(id, updateCheckListCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idItem 
         * @param {UpdateCheckListItemCommand} [updateCheckListItemCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistItem(id: number, idItem: number, updateCheckListItemCommand?: UpdateCheckListItemCommand, options?: any): AxiosPromise<void> {
            return localVarFp.updateChecklistItem(id, idItem, updateCheckListItemCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckListsApi - object-oriented interface
 * @export
 * @class CheckListsApi
 * @extends {BaseAPI}
 */
export class CheckListsApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {AddCheckListItemCommand} [addCheckListItemCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public addItemToChecklist(id: number, addCheckListItemCommand?: AddCheckListItemCommand, options?: any) {
        return CheckListsApiFp(this.configuration).addItemToChecklist(id, addCheckListItemCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddCheckListCommand} [addCheckListCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public createCheckList(addCheckListCommand?: AddCheckListCommand, options?: any) {
        return CheckListsApiFp(this.configuration).createCheckList(addCheckListCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public deleteChecklist(id: number, options?: any) {
        return CheckListsApiFp(this.configuration).deleteChecklist(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public deleteChecklistItem(id: number, idItem: number, options?: any) {
        return CheckListsApiFp(this.configuration).deleteChecklistItem(id, idItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public getCheckListbyId(id: number, options?: any) {
        return CheckListsApiFp(this.configuration).getCheckListbyId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {number} [reportConfigurationId] 
     * @param {number} [reportId] 
     * @param {boolean} [inConfigurationOnly] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public getChecklists(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any) {
        return CheckListsApiFp(this.configuration).getChecklists(filter, reportConfigurationId, reportId, inConfigurationOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateCheckListCommand} [updateCheckListCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public updateChecklist(id: number, updateCheckListCommand?: UpdateCheckListCommand, options?: any) {
        return CheckListsApiFp(this.configuration).updateChecklist(id, updateCheckListCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idItem 
     * @param {UpdateCheckListItemCommand} [updateCheckListItemCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckListsApi
     */
    public updateChecklistItem(id: number, idItem: number, updateCheckListItemCommand?: UpdateCheckListItemCommand, options?: any) {
        return CheckListsApiFp(this.configuration).updateChecklistItem(id, idItem, updateCheckListItemCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EMALicensesApi - axios parameter creator
 * @export
 */
export const EMALicensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLicense: async (licenseDTO?: LicenseDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/EMALicenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(licenseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLicense', 'id', id)
            const localVarPath = `/EMALicenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicense: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLicense', 'id', id)
            const localVarPath = `/EMALicenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/EMALicenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicensesDashboard: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/EMALicenses/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicense: async (id: number, licenseDTO?: LicenseDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLicense', 'id', id)
            const localVarPath = `/EMALicenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(licenseDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EMALicensesApi - functional programming interface
 * @export
 */
export const EMALicensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EMALicensesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLicense(licenseDTO?: LicenseDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EMALicense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLicense(licenseDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLicense(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EMALicense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLicense(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicense(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicense(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicenses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicensesDashboard(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LicenseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicensesDashboard(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLicense(id: number, licenseDTO?: LicenseDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLicense(id, licenseDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EMALicensesApi - factory interface
 * @export
 */
export const EMALicensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EMALicensesApiFp(configuration)
    return {
        /**
         * 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLicense(licenseDTO?: LicenseDTO, options?: any): AxiosPromise<EMALicense> {
            return localVarFp.addLicense(licenseDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: number, options?: any): AxiosPromise<EMALicense> {
            return localVarFp.deleteLicense(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicense(id: number, options?: any): AxiosPromise<LicenseDTO> {
            return localVarFp.getLicense(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(options?: any): AxiosPromise<void> {
            return localVarFp.getLicenses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicensesDashboard(options?: any): AxiosPromise<Array<LicenseDTO>> {
            return localVarFp.getLicensesDashboard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LicenseDTO} [licenseDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicense(id: number, licenseDTO?: LicenseDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateLicense(id, licenseDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EMALicensesApi - object-oriented interface
 * @export
 * @class EMALicensesApi
 * @extends {BaseAPI}
 */
export class EMALicensesApi extends BaseAPI {
    /**
     * 
     * @param {LicenseDTO} [licenseDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public addLicense(licenseDTO?: LicenseDTO, options?: any) {
        return EMALicensesApiFp(this.configuration).addLicense(licenseDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public deleteLicense(id: number, options?: any) {
        return EMALicensesApiFp(this.configuration).deleteLicense(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public getLicense(id: number, options?: any) {
        return EMALicensesApiFp(this.configuration).getLicense(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public getLicenses(options?: any) {
        return EMALicensesApiFp(this.configuration).getLicenses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public getLicensesDashboard(options?: any) {
        return EMALicensesApiFp(this.configuration).getLicensesDashboard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LicenseDTO} [licenseDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EMALicensesApi
     */
    public updateLicense(id: number, licenseDTO?: LicenseDTO, options?: any) {
        return EMALicensesApiFp(this.configuration).updateLicense(id, licenseDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnergyReportApi - axios parameter creator
 * @export
 */
export const EnergyReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportBackgroundGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EnergyReport/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportCategoryGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EnergyReport/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportCategoryPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EnergyReport/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnergyReportApi - functional programming interface
 * @export
 */
export const EnergyReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnergyReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnergyReportBackgroundGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnergyReportBackgroundGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnergyReportCategoryGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnergyReportCategoryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnergyReportCategoryPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnergyReportCategoryPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnergyReportApi - factory interface
 * @export
 */
export const EnergyReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnergyReportApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportBackgroundGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiEnergyReportBackgroundGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportCategoryGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiEnergyReportCategoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnergyReportCategoryPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiEnergyReportCategoryPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnergyReportApi - object-oriented interface
 * @export
 * @class EnergyReportApi
 * @extends {BaseAPI}
 */
export class EnergyReportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyReportApi
     */
    public apiEnergyReportBackgroundGet(options?: any) {
        return EnergyReportApiFp(this.configuration).apiEnergyReportBackgroundGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyReportApi
     */
    public apiEnergyReportCategoryGet(options?: any) {
        return EnergyReportApiFp(this.configuration).apiEnergyReportCategoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyReportApi
     */
    public apiEnergyReportCategoryPost(options?: any) {
        return EnergyReportApiFp(this.configuration).apiEnergyReportCategoryPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportConfigurationApi - axios parameter creator
 * @export
 */
export const ReportConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationGet: async (filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ReportConfiguration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportConfigurationIdDelete', 'id', id)
            const localVarPath = `/ReportConfiguration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportConfigurationIdGet', 'id', id)
            const localVarPath = `/ReportConfiguration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateReportConfigurationCommand} [updateReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdPut: async (id: number, updateReportConfigurationCommand?: UpdateReportConfigurationCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportConfigurationIdPut', 'id', id)
            const localVarPath = `/ReportConfiguration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReportConfigurationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddReportConfigurationCommand} [addReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationPost: async (addReportConfigurationCommand?: AddReportConfigurationCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ReportConfiguration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addReportConfigurationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportConfigurationApi - functional programming interface
 * @export
 */
export const ReportConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportConfigurationGet(filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResumenReportConfiguration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportConfigurationGet(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportConfigurationIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportConfigurationIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportConfigurationIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportConfigurationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportConfigurationIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateReportConfigurationCommand} [updateReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportConfigurationIdPut(id: number, updateReportConfigurationCommand?: UpdateReportConfigurationCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportConfigurationIdPut(id, updateReportConfigurationCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddReportConfigurationCommand} [addReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportConfigurationPost(addReportConfigurationCommand?: AddReportConfigurationCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportConfigurationPost(addReportConfigurationCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportConfigurationApi - factory interface
 * @export
 */
export const ReportConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportConfigurationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationGet(filter?: string, options?: any): AxiosPromise<Array<ResumenReportConfiguration>> {
            return localVarFp.reportConfigurationGet(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.reportConfigurationIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdGet(id: number, options?: any): AxiosPromise<ReportConfigurationDTO> {
            return localVarFp.reportConfigurationIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateReportConfigurationCommand} [updateReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationIdPut(id: number, updateReportConfigurationCommand?: UpdateReportConfigurationCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportConfigurationIdPut(id, updateReportConfigurationCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddReportConfigurationCommand} [addReportConfigurationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportConfigurationPost(addReportConfigurationCommand?: AddReportConfigurationCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportConfigurationPost(addReportConfigurationCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportConfigurationApi - object-oriented interface
 * @export
 * @class ReportConfigurationApi
 * @extends {BaseAPI}
 */
export class ReportConfigurationApi extends BaseAPI {
    /**
     * 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportConfigurationApi
     */
    public reportConfigurationGet(filter?: string, options?: any) {
        return ReportConfigurationApiFp(this.configuration).reportConfigurationGet(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportConfigurationApi
     */
    public reportConfigurationIdDelete(id: number, options?: any) {
        return ReportConfigurationApiFp(this.configuration).reportConfigurationIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportConfigurationApi
     */
    public reportConfigurationIdGet(id: number, options?: any) {
        return ReportConfigurationApiFp(this.configuration).reportConfigurationIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateReportConfigurationCommand} [updateReportConfigurationCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportConfigurationApi
     */
    public reportConfigurationIdPut(id: number, updateReportConfigurationCommand?: UpdateReportConfigurationCommand, options?: any) {
        return ReportConfigurationApiFp(this.configuration).reportConfigurationIdPut(id, updateReportConfigurationCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddReportConfigurationCommand} [addReportConfigurationCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportConfigurationApi
     */
    public reportConfigurationPost(addReportConfigurationCommand?: AddReportConfigurationCommand, options?: any) {
        return ReportConfigurationApiFp(this.configuration).reportConfigurationPost(addReportConfigurationCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} reportId 
         * @param {number} checkListId 
         * @param {number} [newValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateChecks: async (reportId: number, checkListId: number, newValue?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('bulkUpdateChecks', 'reportId', reportId)
            // verify required parameter 'checkListId' is not null or undefined
            assertParamExists('bulkUpdateChecks', 'checkListId', checkListId)
            const localVarPath = `/Reports/{reportId}/checklists/{checkListId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)))
                .replace(`{${"checkListId"}}`, encodeURIComponent(String(checkListId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (newValue !== undefined) {
                localVarQueryParameter['newValue'] = newValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} reportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeReport: async (reportId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('completeReport', 'reportId', reportId)
            const localVarPath = `/Reports/{reportId}/complete`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {boolean} [closed] 
         * @param {boolean} [myReports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsGet: async (filter?: string, closed?: boolean, myReports?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (closed !== undefined) {
                localVarQueryParameter['closed'] = closed;
            }

            if (myReports !== undefined) {
                localVarQueryParameter['myReports'] = myReports;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdDelete', 'id', id)
            const localVarPath = `/Reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdGet', 'id', id)
            const localVarPath = `/Reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNoteIdNoteDelete: async (id: number, idNote: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdNoteIdNoteDelete', 'id', id)
            // verify required parameter 'idNote' is not null or undefined
            assertParamExists('reportsIdNoteIdNoteDelete', 'idNote', idNote)
            const localVarPath = `/Reports/{id}/note/{idNote}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idNote"}}`, encodeURIComponent(String(idNote)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {EditNoteCommand} [editNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNoteIdNotePut: async (id: number, idNote: number, editNoteCommand?: EditNoteCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdNoteIdNotePut', 'id', id)
            // verify required parameter 'idNote' is not null or undefined
            assertParamExists('reportsIdNoteIdNotePut', 'idNote', idNote)
            const localVarPath = `/Reports/{id}/note/{idNote}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idNote"}}`, encodeURIComponent(String(idNote)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editNoteCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AddNoteCommand} [addNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNotePost: async (id: number, addNoteCommand?: AddNoteCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdNotePost', 'id', id)
            const localVarPath = `/Reports/{id}/note`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addNoteCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdPhotorecordGet', 'id', id)
            const localVarPath = `/Reports/{id}/photorecord`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordIdPhotoDelete: async (id: number, idPhoto: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdPhotorecordIdPhotoDelete', 'id', id)
            // verify required parameter 'idPhoto' is not null or undefined
            assertParamExists('reportsIdPhotorecordIdPhotoDelete', 'idPhoto', idPhoto)
            const localVarPath = `/Reports/{id}/photorecord/{idPhoto}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idPhoto"}}`, encodeURIComponent(String(idPhoto)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {EditPhotoRecordCommand} [editPhotoRecordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordIdPhotoPut: async (id: number, idPhoto: number, editPhotoRecordCommand?: EditPhotoRecordCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdPhotorecordIdPhotoPut', 'id', id)
            // verify required parameter 'idPhoto' is not null or undefined
            assertParamExists('reportsIdPhotorecordIdPhotoPut', 'idPhoto', idPhoto)
            const localVarPath = `/Reports/{id}/photorecord/{idPhoto}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idPhoto"}}`, encodeURIComponent(String(idPhoto)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPhotoRecordCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [label] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordPost: async (id: number, label?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdPhotorecordPost', 'id', id)
            const localVarPath = `/Reports/{id}/photorecord`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (label !== undefined && label !== null) {
                localVarHeaderParameter['label'] = String(label);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateReportCommand} [updateReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPut: async (id: string, updateReportCommand?: UpdateReportCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportsIdPut', 'id', id)
            const localVarPath = `/Reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReportCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateReportCommand} [createReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsPost: async (createReportCommand?: CreateReportCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReportCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOperationalReadingsCommand} [updateOperationalReadingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperationalReadings: async (id: number, updateOperationalReadingsCommand?: UpdateOperationalReadingsCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOperationalReadings', 'id', id)
            const localVarPath = `/Reports/{id}/readings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOperationalReadingsCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} reportId 
         * @param {number} checkListId 
         * @param {number} [newValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateChecks(reportId: number, checkListId: number, newValue?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateChecks(reportId, checkListId, newValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} reportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeReport(reportId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeReport(reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {boolean} [closed] 
         * @param {boolean} [myReports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsGet(filter?: string, closed?: boolean, myReports?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsGet(filter, closed, myReports, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdNoteIdNoteDelete(id: number, idNote: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdNoteIdNoteDelete(id, idNote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {EditNoteCommand} [editNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdNoteIdNotePut(id: number, idNote: number, editNoteCommand?: EditNoteCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdNoteIdNotePut(id, idNote, editNoteCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AddNoteCommand} [addNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdNotePost(id: number, addNoteCommand?: AddNoteCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdNotePost(id, addNoteCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdPhotorecordGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdPhotorecordGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdPhotorecordIdPhotoDelete(id: number, idPhoto: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdPhotorecordIdPhotoDelete(id, idPhoto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {EditPhotoRecordCommand} [editPhotoRecordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdPhotorecordIdPhotoPut(id: number, idPhoto: number, editPhotoRecordCommand?: EditPhotoRecordCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdPhotorecordIdPhotoPut(id, idPhoto, editPhotoRecordCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [label] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdPhotorecordPost(id: number, label?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdPhotorecordPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateReportCommand} [updateReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsIdPut(id: string, updateReportCommand?: UpdateReportCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsIdPut(id, updateReportCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateReportCommand} [createReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsPost(createReportCommand?: CreateReportCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsPost(createReportCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOperationalReadingsCommand} [updateOperationalReadingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOperationalReadings(id: number, updateOperationalReadingsCommand?: UpdateOperationalReadingsCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOperationalReadings(id, updateOperationalReadingsCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} reportId 
         * @param {number} checkListId 
         * @param {number} [newValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateChecks(reportId: number, checkListId: number, newValue?: number, options?: any): AxiosPromise<void> {
            return localVarFp.bulkUpdateChecks(reportId, checkListId, newValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} reportId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeReport(reportId: number, options?: any): AxiosPromise<void> {
            return localVarFp.completeReport(reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {boolean} [closed] 
         * @param {boolean} [myReports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsGet(filter?: string, closed?: boolean, myReports?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.reportsGet(filter, closed, myReports, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdGet(id: number, options?: any): AxiosPromise<ReportQueryResult> {
            return localVarFp.reportsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNoteIdNoteDelete(id: number, idNote: number, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdNoteIdNoteDelete(id, idNote, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idNote 
         * @param {EditNoteCommand} [editNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNoteIdNotePut(id: number, idNote: number, editNoteCommand?: EditNoteCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdNoteIdNotePut(id, idNote, editNoteCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AddNoteCommand} [addNoteCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdNotePost(id: number, addNoteCommand?: AddNoteCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdNotePost(id, addNoteCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdPhotorecordGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordIdPhotoDelete(id: number, idPhoto: number, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdPhotorecordIdPhotoDelete(id, idPhoto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} idPhoto 
         * @param {EditPhotoRecordCommand} [editPhotoRecordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordIdPhotoPut(id: number, idPhoto: number, editPhotoRecordCommand?: EditPhotoRecordCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdPhotorecordIdPhotoPut(id, idPhoto, editPhotoRecordCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [label] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPhotorecordPost(id: number, label?: string, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdPhotorecordPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateReportCommand} [updateReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsIdPut(id: string, updateReportCommand?: UpdateReportCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportsIdPut(id, updateReportCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateReportCommand} [createReportCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsPost(createReportCommand?: CreateReportCommand, options?: any): AxiosPromise<void> {
            return localVarFp.reportsPost(createReportCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOperationalReadingsCommand} [updateOperationalReadingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOperationalReadings(id: number, updateOperationalReadingsCommand?: UpdateOperationalReadingsCommand, options?: any): AxiosPromise<void> {
            return localVarFp.updateOperationalReadings(id, updateOperationalReadingsCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @param {number} reportId 
     * @param {number} checkListId 
     * @param {number} [newValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public bulkUpdateChecks(reportId: number, checkListId: number, newValue?: number, options?: any) {
        return ReportsApiFp(this.configuration).bulkUpdateChecks(reportId, checkListId, newValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} reportId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public completeReport(reportId: number, options?: any) {
        return ReportsApiFp(this.configuration).completeReport(reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {boolean} [closed] 
     * @param {boolean} [myReports] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsGet(filter?: string, closed?: boolean, myReports?: boolean, options?: any) {
        return ReportsApiFp(this.configuration).reportsGet(filter, closed, myReports, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdDelete(id: number, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdGet(id: number, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdNoteIdNoteDelete(id: number, idNote: number, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdNoteIdNoteDelete(id, idNote, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idNote 
     * @param {EditNoteCommand} [editNoteCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdNoteIdNotePut(id: number, idNote: number, editNoteCommand?: EditNoteCommand, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdNoteIdNotePut(id, idNote, editNoteCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AddNoteCommand} [addNoteCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdNotePost(id: number, addNoteCommand?: AddNoteCommand, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdNotePost(id, addNoteCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdPhotorecordGet(id: number, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdPhotorecordGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idPhoto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdPhotorecordIdPhotoDelete(id: number, idPhoto: number, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdPhotorecordIdPhotoDelete(id, idPhoto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} idPhoto 
     * @param {EditPhotoRecordCommand} [editPhotoRecordCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdPhotorecordIdPhotoPut(id: number, idPhoto: number, editPhotoRecordCommand?: EditPhotoRecordCommand, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdPhotorecordIdPhotoPut(id, idPhoto, editPhotoRecordCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} [label] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdPhotorecordPost(id: number, label?: string, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdPhotorecordPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateReportCommand} [updateReportCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsIdPut(id: string, updateReportCommand?: UpdateReportCommand, options?: any) {
        return ReportsApiFp(this.configuration).reportsIdPut(id, updateReportCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateReportCommand} [createReportCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsPost(createReportCommand?: CreateReportCommand, options?: any) {
        return ReportsApiFp(this.configuration).reportsPost(createReportCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateOperationalReadingsCommand} [updateOperationalReadingsCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public updateOperationalReadings(id: number, updateOperationalReadingsCommand?: UpdateOperationalReadingsCommand, options?: any) {
        return ReportsApiFp(this.configuration).updateOperationalReadings(id, updateOperationalReadingsCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignaturesApi - axios parameter creator
 * @export
 */
export const SignaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesGet: async (filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Signatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (reportConfigurationId !== undefined) {
                localVarQueryParameter['reportConfigurationId'] = reportConfigurationId;
            }

            if (reportId !== undefined) {
                localVarQueryParameter['reportId'] = reportId;
            }

            if (inConfigurationOnly !== undefined) {
                localVarQueryParameter['inConfigurationOnly'] = inConfigurationOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('signaturesIdDelete', 'id', id)
            const localVarPath = `/Signatures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('signaturesIdGet', 'id', id)
            const localVarPath = `/Signatures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EditSignatureCommand} [editSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdPut: async (id: number, editSignatureCommand?: EditSignatureCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('signaturesIdPut', 'id', id)
            const localVarPath = `/Signatures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editSignatureCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddSignatureCommand} [addSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesPost: async (addSignatureCommand?: AddSignatureCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Signatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSignatureCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignaturesApi - functional programming interface
 * @export
 */
export const SignaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesGet(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SignatureDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesGet(filter, reportConfigurationId, reportId, inConfigurationOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EditSignatureCommand} [editSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesIdPut(id: number, editSignatureCommand?: EditSignatureCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesIdPut(id, editSignatureCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddSignatureCommand} [addSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signaturesPost(addSignatureCommand?: AddSignatureCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signaturesPost(addSignatureCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignaturesApi - factory interface
 * @export
 */
export const SignaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignaturesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {number} [reportConfigurationId] 
         * @param {number} [reportId] 
         * @param {boolean} [inConfigurationOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesGet(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any): AxiosPromise<Array<SignatureDTO>> {
            return localVarFp.signaturesGet(filter, reportConfigurationId, reportId, inConfigurationOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.signaturesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.signaturesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EditSignatureCommand} [editSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesIdPut(id: number, editSignatureCommand?: EditSignatureCommand, options?: any): AxiosPromise<void> {
            return localVarFp.signaturesIdPut(id, editSignatureCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddSignatureCommand} [addSignatureCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signaturesPost(addSignatureCommand?: AddSignatureCommand, options?: any): AxiosPromise<void> {
            return localVarFp.signaturesPost(addSignatureCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignaturesApi - object-oriented interface
 * @export
 * @class SignaturesApi
 * @extends {BaseAPI}
 */
export class SignaturesApi extends BaseAPI {
    /**
     * 
     * @param {string} [filter] 
     * @param {number} [reportConfigurationId] 
     * @param {number} [reportId] 
     * @param {boolean} [inConfigurationOnly] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApi
     */
    public signaturesGet(filter?: string, reportConfigurationId?: number, reportId?: number, inConfigurationOnly?: boolean, options?: any) {
        return SignaturesApiFp(this.configuration).signaturesGet(filter, reportConfigurationId, reportId, inConfigurationOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApi
     */
    public signaturesIdDelete(id: number, options?: any) {
        return SignaturesApiFp(this.configuration).signaturesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApi
     */
    public signaturesIdGet(id: number, options?: any) {
        return SignaturesApiFp(this.configuration).signaturesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EditSignatureCommand} [editSignatureCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApi
     */
    public signaturesIdPut(id: number, editSignatureCommand?: EditSignatureCommand, options?: any) {
        return SignaturesApiFp(this.configuration).signaturesIdPut(id, editSignatureCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddSignatureCommand} [addSignatureCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesApi
     */
    public signaturesPost(addSignatureCommand?: AddSignatureCommand, options?: any) {
        return SignaturesApiFp(this.configuration).signaturesPost(addSignatureCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userDTO?: UserDTO, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change User Password afeter validated
         * @param {string} userName 
         * @param {ChangePasswordDTO} [changePasswordDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (userName: string, changePasswordDTO?: ChangePasswordDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('changePassword', 'userName', userName)
            const localVarPath = `/Users/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('deleteUser', 'userName', userName)
            const localVarPath = `/Users/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserName: async (userName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('getUserByUserName', 'userName', userName)
            const localVarPath = `/Users/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userName: string, userDTO?: UserDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('updateUser', 'userName', userName)
            const localVarPath = `/Users/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userDTO?: UserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change User Password afeter validated
         * @param {string} userName 
         * @param {ChangePasswordDTO} [changePasswordDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(userName: string, changePasswordDTO?: ChangePasswordDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(userName, changePasswordDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUserName(userName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUserName(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userName: string, userDTO?: UserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userName, userDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userDTO?: UserDTO, options?: any): AxiosPromise<User> {
            return localVarFp.addUser(userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change User Password afeter validated
         * @param {string} userName 
         * @param {ChangePasswordDTO} [changePasswordDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(userName: string, changePasswordDTO?: ChangePasswordDTO, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(userName, changePasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userName: string, options?: any): AxiosPromise<User> {
            return localVarFp.deleteUser(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveUser(options?: any): AxiosPromise<UserDTO> {
            return localVarFp.getActiveUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserName(userName: string, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.getUserByUserName(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<UserDTO>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {UserDTO} [userDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userName: string, userDTO?: UserDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(userName, userDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UserDTO} [userDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(userDTO?: UserDTO, options?: any) {
        return UsersApiFp(this.configuration).addUser(userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change User Password afeter validated
     * @param {string} userName 
     * @param {ChangePasswordDTO} [changePasswordDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changePassword(userName: string, changePasswordDTO?: ChangePasswordDTO, options?: any) {
        return UsersApiFp(this.configuration).changePassword(userName, changePasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userName: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getActiveUser(options?: any) {
        return UsersApiFp(this.configuration).getActiveUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByUserName(userName: string, options?: any) {
        return UsersApiFp(this.configuration).getUserByUserName(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: any) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {UserDTO} [userDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userName: string, userDTO?: UserDTO, options?: any) {
        return UsersApiFp(this.configuration).updateUser(userName, userDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


