/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    getAddresses(filter?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AddressDTO[]> {
        let url_ = this.baseUrl + "/Addresses?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAddresses(_response);
        });
    }

    protected processGetAddresses(response: AxiosResponse): Promise<AddressDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AddressDTO.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addAddress(body?: AddressDTO | undefined , cancelToken?: CancelToken | undefined): Promise<Address> {
        let url_ = this.baseUrl + "/Addresses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddAddress(_response);
        });
    }

    protected processAddAddress(response: AxiosResponse): Promise<Address> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Address.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Address>(<any>null);
    }

    /**
     * @return Success
     */
    addresses(id: number , cancelToken?: CancelToken | undefined): Promise<AddressDTO> {
        let url_ = this.baseUrl + "/Addresses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddresses(_response);
        });
    }

    protected processAddresses(response: AxiosResponse): Promise<AddressDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AddressDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateAddress(id: number, body?: AddressDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Addresses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateAddress(_response);
        });
    }

    protected processUpdateAddress(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteAddress(id: number , cancelToken?: CancelToken | undefined): Promise<AddressDTO> {
        let url_ = this.baseUrl + "/Addresses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAddress(_response);
        });
    }

    protected processDeleteAddress(response: AxiosResponse): Promise<AddressDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AddressDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddressDTO>(<any>null);
    }

    /**
     * Generates a JWT token for use in api call
     * @param body (optional) 
     * @return Success
     */
    login(body?: LoginModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Auth/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createCheckList(body?: AddCheckListCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateCheckList(_response);
        });
    }

    protected processCreateCheckList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param filter (optional) 
     * @param reportConfigurationId (optional) 
     * @param reportId (optional) 
     * @param inConfigurationOnly (optional) 
     * @return Success
     */
    getChecklists(filter?: string | null | undefined, reportConfigurationId?: number | null | undefined, reportId?: number | null | undefined, inConfigurationOnly?: boolean | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (reportConfigurationId !== undefined && reportConfigurationId !== null)
            url_ += "reportConfigurationId=" + encodeURIComponent("" + reportConfigurationId) + "&";
        if (reportId !== undefined && reportId !== null)
            url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
        if (inConfigurationOnly !== undefined && inConfigurationOnly !== null)
            url_ += "inConfigurationOnly=" + encodeURIComponent("" + inConfigurationOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChecklists(_response);
        });
    }

    protected processGetChecklists(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addItemToChecklist(id: number, body?: AddCheckListItemCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddItemToChecklist(_response);
        });
    }

    protected processAddItemToChecklist(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addParams(id: string, body?: AddCheckListParamCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/params";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddParams(_response);
        });
    }

    protected processAddParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addItemParam(id: string, idItem: string, body?: AddCheckListItemParamCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items/{idItem}/params";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idItem === undefined || idItem === null)
            throw new Error("The parameter 'idItem' must be defined.");
        url_ = url_.replace("{idItem}", encodeURIComponent("" + idItem));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddItemParam(_response);
        });
    }

    protected processAddItemParam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param idParam (optional) 
     * @param body (optional) 
     * @return Success
     */
    updateItemParam(id: number, idItem: number, idParam?: number | undefined, body?: UpdateCheckListParamCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items/{idItem}/params?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idItem === undefined || idItem === null)
            throw new Error("The parameter 'idItem' must be defined.");
        url_ = url_.replace("{idItem}", encodeURIComponent("" + idItem));
        if (idParam === null)
            throw new Error("The parameter 'idParam' cannot be null.");
        else if (idParam !== undefined)
            url_ += "idParam=" + encodeURIComponent("" + idParam) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateItemParam(_response);
        });
    }

    protected processUpdateItemParam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param idParam (optional) 
     * @return Success
     */
    deleteItemParam(id: number, idItem: number, idParam?: number | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items/{idItem}/params?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idItem === undefined || idItem === null)
            throw new Error("The parameter 'idItem' must be defined.");
        url_ = url_.replace("{idItem}", encodeURIComponent("" + idItem));
        if (idParam === null)
            throw new Error("The parameter 'idParam' cannot be null.");
        else if (idParam !== undefined)
            url_ += "idParam=" + encodeURIComponent("" + idParam) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteItemParam(_response);
        });
    }

    protected processDeleteItemParam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateChecklist(id: number, body?: UpdateCheckListCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateChecklist(_response);
        });
    }

    protected processUpdateChecklist(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    deleteChecklist(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteChecklist(_response);
        });
    }

    protected processDeleteChecklist(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    getCheckListbyId(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCheckListbyId(_response);
        });
    }

    protected processGetCheckListbyId(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateChecklistItem(id: number, idItem: number, body?: UpdateCheckListItemCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items/{idItem}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idItem === undefined || idItem === null)
            throw new Error("The parameter 'idItem' must be defined.");
        url_ = url_.replace("{idItem}", encodeURIComponent("" + idItem));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateChecklistItem(_response);
        });
    }

    protected processUpdateChecklistItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    deleteChecklistItem(id: number, idItem: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/items/{idItem}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idItem === undefined || idItem === null)
            throw new Error("The parameter 'idItem' must be defined.");
        url_ = url_.replace("{idItem}", encodeURIComponent("" + idItem));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteChecklistItem(_response);
        });
    }

    protected processDeleteChecklistItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateParam(id: number, idParam: number, body?: UpdateCheckListParamCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/params/{idParam}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idParam === undefined || idParam === null)
            throw new Error("The parameter 'idParam' must be defined.");
        url_ = url_.replace("{idParam}", encodeURIComponent("" + idParam));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateParam(_response);
        });
    }

    protected processUpdateParam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    deleteParam(id: number, idParam: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/CheckLists/{id}/params/{idParam}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idParam === undefined || idParam === null)
            throw new Error("The parameter 'idParam' must be defined.");
        url_ = url_.replace("{idParam}", encodeURIComponent("" + idParam));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteParam(_response);
        });
    }

    protected processDeleteParam(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    getLicenses(  cancelToken?: CancelToken | undefined): Promise<LicenseDTO[]> {
        let url_ = this.baseUrl + "/EMALicenses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLicenses(_response);
        });
    }

    protected processGetLicenses(response: AxiosResponse): Promise<LicenseDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LicenseDTO.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LicenseDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addLicense(body?: LicenseDTO | undefined , cancelToken?: CancelToken | undefined): Promise<EMALicense> {
        let url_ = this.baseUrl + "/EMALicenses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddLicense(_response);
        });
    }

    protected processAddLicense(response: AxiosResponse): Promise<EMALicense> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EMALicense.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EMALicense>(<any>null);
    }

    /**
     * @return Success
     */
    getLicense(id: number , cancelToken?: CancelToken | undefined): Promise<LicenseDTO> {
        let url_ = this.baseUrl + "/EMALicenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLicense(_response);
        });
    }

    protected processGetLicense(response: AxiosResponse): Promise<LicenseDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LicenseDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LicenseDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateLicense(id: number, body?: LicenseDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/EMALicenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateLicense(_response);
        });
    }

    protected processUpdateLicense(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLicense(id: number , cancelToken?: CancelToken | undefined): Promise<EMALicense> {
        let url_ = this.baseUrl + "/EMALicenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteLicense(_response);
        });
    }

    protected processDeleteLicense(response: AxiosResponse): Promise<EMALicense> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EMALicense.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EMALicense>(<any>null);
    }

    /**
     * @return Success
     */
    getLicensesDashboard(  cancelToken?: CancelToken | undefined): Promise<LicenseDTO[]> {
        let url_ = this.baseUrl + "/EMALicenses/dashboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLicensesDashboard(_response);
        });
    }

    protected processGetLicensesDashboard(response: AxiosResponse): Promise<LicenseDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LicenseDTO.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LicenseDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reportConfiguration(body?: AddReportConfigurationCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ReportConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportConfiguration(_response);
        });
    }

    protected processReportConfiguration(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    reportConfigurationAll(filter?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ResumenReportConfiguration[]> {
        let url_ = this.baseUrl + "/ReportConfiguration?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportConfigurationAll(_response);
        });
    }

    protected processReportConfigurationAll(response: AxiosResponse): Promise<ResumenReportConfiguration[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResumenReportConfiguration.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResumenReportConfiguration[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reportConfiguration2(id: number, body?: UpdateReportConfigurationCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ReportConfiguration/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportConfiguration2(_response);
        });
    }

    protected processReportConfiguration2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    reportConfiguration3(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ReportConfiguration/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportConfiguration3(_response);
        });
    }

    protected processReportConfiguration3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    reportConfiguration4(id: number , cancelToken?: CancelToken | undefined): Promise<ReportConfigurationDTO> {
        let url_ = this.baseUrl + "/ReportConfiguration/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportConfiguration4(_response);
        });
    }

    protected processReportConfiguration4(response: AxiosResponse): Promise<ReportConfigurationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ReportConfigurationDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReportConfigurationDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reports(body?: CreateReportCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReports(_response);
        });
    }

    protected processReports(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param closed (optional) 
     * @return Success
     */
    reports2(filter?: string | null | undefined, closed?: boolean | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (closed !== undefined && closed !== null)
            url_ += "closed=" + encodeURIComponent("" + closed) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReports2(_response);
        });
    }

    protected processReports2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reports3(id: string, body?: UpdateReportCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReports3(_response);
        });
    }

    protected processReports3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    reports4(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReports4(_response);
        });
    }

    protected processReports4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    reports5(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReports5(_response);
        });
    }

    protected processReports5(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    photorecord(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/photorecord";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPhotorecord(_response);
        });
    }

    protected processPhotorecord(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param label (optional) 
     * @return Success
     */
    photorecord2(id: number, label?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/photorecord";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (label !== null && label !== undefined)
            content_.append("label", label.toString());

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPhotorecord2(_response);
        });
    }

    protected processPhotorecord2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    note(id: number, body?: AddNoteCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/note";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNote(_response);
        });
    }

    protected processNote(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    note2(id: number, idNote: number, body?: EditNoteCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/note/{idNote}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idNote === undefined || idNote === null)
            throw new Error("The parameter 'idNote' must be defined.");
        url_ = url_.replace("{idNote}", encodeURIComponent("" + idNote));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNote2(_response);
        });
    }

    protected processNote2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    note3(id: number, idNote: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/note/{idNote}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idNote === undefined || idNote === null)
            throw new Error("The parameter 'idNote' must be defined.");
        url_ = url_.replace("{idNote}", encodeURIComponent("" + idNote));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNote3(_response);
        });
    }

    protected processNote3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    photorecord3(id: number, idPhoto: number, body?: EditPhotoRecordCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/photorecord/{idPhoto}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idPhoto === undefined || idPhoto === null)
            throw new Error("The parameter 'idPhoto' must be defined.");
        url_ = url_.replace("{idPhoto}", encodeURIComponent("" + idPhoto));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPhotorecord3(_response);
        });
    }

    protected processPhotorecord3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    photorecord4(id: number, idPhoto: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/{id}/photorecord/{idPhoto}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (idPhoto === undefined || idPhoto === null)
            throw new Error("The parameter 'idPhoto' must be defined.");
        url_ = url_.replace("{idPhoto}", encodeURIComponent("" + idPhoto));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPhotorecord4(_response);
        });
    }

    protected processPhotorecord4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    signatures(body?: AddSignatureCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Signatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignatures(_response);
        });
    }

    protected processSignatures(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param filter (optional) 
     * @param reportConfigurationId (optional) 
     * @param reportId (optional) 
     * @param inConfigurationOnly (optional) 
     * @return Success
     */
    signaturesAll(filter?: string | null | undefined, reportConfigurationId?: number | null | undefined, reportId?: number | null | undefined, inConfigurationOnly?: boolean | null | undefined , cancelToken?: CancelToken | undefined): Promise<SignatureDTO[]> {
        let url_ = this.baseUrl + "/Signatures?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (reportConfigurationId !== undefined && reportConfigurationId !== null)
            url_ += "reportConfigurationId=" + encodeURIComponent("" + reportConfigurationId) + "&";
        if (reportId !== undefined && reportId !== null)
            url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
        if (inConfigurationOnly !== undefined && inConfigurationOnly !== null)
            url_ += "inConfigurationOnly=" + encodeURIComponent("" + inConfigurationOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignaturesAll(_response);
        });
    }

    protected processSignaturesAll(response: AxiosResponse): Promise<SignatureDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SignatureDTO.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    signatures2(id: number, body?: EditSignatureCommand | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Signatures/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignatures2(_response);
        });
    }

    protected processSignatures2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    signatures3(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Signatures/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignatures3(_response);
        });
    }

    protected processSignatures3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    signatures4(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Signatures/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignatures4(_response);
        });
    }

    protected processSignatures4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * @return Success
     */
    getUsers(  cancelToken?: CancelToken | undefined): Promise<UserDTO[]> {
        let url_ = this.baseUrl + "/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: AxiosResponse): Promise<UserDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDTO.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addUser(body?: UserDTO | undefined , cancelToken?: CancelToken | undefined): Promise<User> {
        let url_ = this.baseUrl + "/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddUser(_response);
        });
    }

    protected processAddUser(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * @return Success
     */
    getUserByUserName(userName: string | null , cancelToken?: CancelToken | undefined): Promise<UserDTO> {
        let url_ = this.baseUrl + "/Users/{userName}";
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined.");
        url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserByUserName(_response);
        });
    }

    protected processGetUserByUserName(response: AxiosResponse): Promise<UserDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUser(userName: string | null, body?: UserDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Users/{userName}";
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined.");
        url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(userName: string | null , cancelToken?: CancelToken | undefined): Promise<User> {
        let url_ = this.baseUrl + "/Users/{userName}";
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined.");
        url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * Change User Password afeter validated
     * @param body (optional) 
     * @return Success
     */
    changePassword(userName: string | null, body?: ChangePasswordDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Users/{userName}";
        if (userName === undefined || userName === null)
            throw new Error("The parameter 'userName' must be defined.");
        url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getActiveUser(  cancelToken?: CancelToken | undefined): Promise<UserDTO> {
        let url_ = this.baseUrl + "/Users/active";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetActiveUser(_response);
        });
    }

    protected processGetActiveUser(response: AxiosResponse): Promise<UserDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDTO.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDTO>(<any>null);
    }
}

export class DateTimeRange implements IDateTimeRange {
    start?: Date;
    end?: Date;

    constructor(data?: IDateTimeRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DateTimeRange {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDateTimeRange {
    start?: Date;
    end?: Date;
}

export class AddressDTO implements IAddressDTO {
    id?: number;
    addressLine?: string | undefined;
    addressLine2?: string | undefined;
    unit?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    licenseId?: number;
    number?: string | undefined;
    validity?: DateTimeRange;
    formatedAddress?: string | undefined;

    constructor(data?: IAddressDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.addressLine = _data["addressLine"];
            this.addressLine2 = _data["addressLine2"];
            this.unit = _data["unit"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
            this.licenseId = _data["licenseId"];
            this.number = _data["number"];
            this.validity = _data["validity"] ? DateTimeRange.fromJS(_data["validity"]) : <any>undefined;
            this.formatedAddress = _data["formatedAddress"];
        }
    }

    static fromJS(data: any): AddressDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["addressLine"] = this.addressLine;
        data["addressLine2"] = this.addressLine2;
        data["unit"] = this.unit;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        data["licenseId"] = this.licenseId;
        data["number"] = this.number;
        data["validity"] = this.validity ? this.validity.toJSON() : <any>undefined;
        data["formatedAddress"] = this.formatedAddress;
        return data; 
    }
}

export interface IAddressDTO {
    id?: number;
    addressLine?: string | undefined;
    addressLine2?: string | undefined;
    unit?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    licenseId?: number;
    number?: string | undefined;
    validity?: DateTimeRange;
    formatedAddress?: string | undefined;
}

export class INotification implements IINotification {

    constructor(data?: IINotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): INotification {
        data = typeof data === 'object' ? data : {};
        let result = new INotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IINotification {
}

export class EMALicense implements IEMALicense {
    number?: string | undefined;
    name?: string | undefined;
    personInCharge?: string | undefined;
    contact?: string | undefined;
    email?: string | undefined;
    amp?: number;
    volt?: number;
    kva?: number;
    validity?: DateTimeRange;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: IEMALicense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.name = _data["name"];
            this.personInCharge = _data["personInCharge"];
            this.contact = _data["contact"];
            this.email = _data["email"];
            this.amp = _data["amp"];
            this.volt = _data["volt"];
            this.kva = _data["kva"];
            this.validity = _data["validity"] ? DateTimeRange.fromJS(_data["validity"]) : <any>undefined;
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EMALicense {
        data = typeof data === 'object' ? data : {};
        let result = new EMALicense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        data["personInCharge"] = this.personInCharge;
        data["contact"] = this.contact;
        data["email"] = this.email;
        data["amp"] = this.amp;
        data["volt"] = this.volt;
        data["kva"] = this.kva;
        data["validity"] = this.validity ? this.validity.toJSON() : <any>undefined;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEMALicense {
    number?: string | undefined;
    name?: string | undefined;
    personInCharge?: string | undefined;
    contact?: string | undefined;
    email?: string | undefined;
    amp?: number;
    volt?: number;
    kva?: number;
    validity?: DateTimeRange;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class Address implements IAddress {
    addressLine?: string | undefined;
    addressLine2?: string | undefined;
    unit?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    licenseId?: number;
    license?: EMALicense;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressLine = _data["addressLine"];
            this.addressLine2 = _data["addressLine2"];
            this.unit = _data["unit"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
            this.licenseId = _data["licenseId"];
            this.license = _data["license"] ? EMALicense.fromJS(_data["license"]) : <any>undefined;
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressLine"] = this.addressLine;
        data["addressLine2"] = this.addressLine2;
        data["unit"] = this.unit;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        data["licenseId"] = this.licenseId;
        data["license"] = this.license ? this.license.toJSON() : <any>undefined;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddress {
    addressLine?: string | undefined;
    addressLine2?: string | undefined;
    unit?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    licenseId?: number;
    license?: EMALicense;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class LoginModel implements ILoginModel {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginModel {
    username?: string | undefined;
    password?: string | undefined;
}

export enum CheckListParamType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class CheckListParamDTO implements ICheckListParamDTO {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;

    constructor(data?: ICheckListParamDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CheckListParamDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CheckListParamDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["value"] = this.value;
        data["type"] = this.type;
        return data; 
    }
}

export interface ICheckListParamDTO {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;
}

export enum CheckValue {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class CheckListItemDTO implements ICheckListItemDTO {
    id?: number;
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    textParams?: CheckListParamDTO[] | undefined;

    constructor(data?: ICheckListItemDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.checkListId = _data["checkListId"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            this.editable = _data["editable"];
            this.required = _data["required"];
            this.remarks = _data["remarks"];
            if (Array.isArray(_data["textParams"])) {
                this.textParams = [] as any;
                for (let item of _data["textParams"])
                    this.textParams!.push(CheckListParamDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CheckListItemDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CheckListItemDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["checkListId"] = this.checkListId;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["editable"] = this.editable;
        data["required"] = this.required;
        data["remarks"] = this.remarks;
        if (Array.isArray(this.textParams)) {
            data["textParams"] = [];
            for (let item of this.textParams)
                data["textParams"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICheckListItemDTO {
    id?: number;
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    textParams?: CheckListParamDTO[] | undefined;
}

export class AddCheckListCommand implements IAddCheckListCommand {
    text?: string | undefined;
    textParams?: CheckListParamDTO[] | undefined;
    items?: CheckListItemDTO[] | undefined;
    annotation?: string | undefined;
    isConfiguration?: boolean;

    constructor(data?: IAddCheckListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            if (Array.isArray(_data["textParams"])) {
                this.textParams = [] as any;
                for (let item of _data["textParams"])
                    this.textParams!.push(CheckListParamDTO.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CheckListItemDTO.fromJS(item));
            }
            this.annotation = _data["annotation"];
            this.isConfiguration = _data["isConfiguration"];
        }
    }

    static fromJS(data: any): AddCheckListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCheckListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        if (Array.isArray(this.textParams)) {
            data["textParams"] = [];
            for (let item of this.textParams)
                data["textParams"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["annotation"] = this.annotation;
        data["isConfiguration"] = this.isConfiguration;
        return data; 
    }
}

export interface IAddCheckListCommand {
    text?: string | undefined;
    textParams?: CheckListParamDTO[] | undefined;
    items?: CheckListItemDTO[] | undefined;
    annotation?: string | undefined;
    isConfiguration?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class AddCheckListItemCommand implements IAddCheckListItemCommand {
    idCheckList?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    checklistParams?: CheckListParamDTO[] | undefined;

    constructor(data?: IAddCheckListItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCheckList = _data["idCheckList"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            this.editable = _data["editable"];
            this.required = _data["required"];
            this.remarks = _data["remarks"];
            if (Array.isArray(_data["checklistParams"])) {
                this.checklistParams = [] as any;
                for (let item of _data["checklistParams"])
                    this.checklistParams!.push(CheckListParamDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCheckListItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCheckListItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCheckList"] = this.idCheckList;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["editable"] = this.editable;
        data["required"] = this.required;
        data["remarks"] = this.remarks;
        if (Array.isArray(this.checklistParams)) {
            data["checklistParams"] = [];
            for (let item of this.checklistParams)
                data["checklistParams"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddCheckListItemCommand {
    idCheckList?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    checklistParams?: CheckListParamDTO[] | undefined;
}

export class AddCheckListParamCommand implements IAddCheckListParamCommand {
    idCheckList?: number;
    checklistParams?: CheckListParamDTO[] | undefined;

    constructor(data?: IAddCheckListParamCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCheckList = _data["idCheckList"];
            if (Array.isArray(_data["checklistParams"])) {
                this.checklistParams = [] as any;
                for (let item of _data["checklistParams"])
                    this.checklistParams!.push(CheckListParamDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCheckListParamCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCheckListParamCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCheckList"] = this.idCheckList;
        if (Array.isArray(this.checklistParams)) {
            data["checklistParams"] = [];
            for (let item of this.checklistParams)
                data["checklistParams"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddCheckListParamCommand {
    idCheckList?: number;
    checklistParams?: CheckListParamDTO[] | undefined;
}

export class AddCheckListItemParamCommand implements IAddCheckListItemParamCommand {
    idCheckList?: number;
    idCheckListItem?: number;
    checkListParams?: CheckListParamDTO[] | undefined;

    constructor(data?: IAddCheckListItemParamCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCheckList = _data["idCheckList"];
            this.idCheckListItem = _data["idCheckListItem"];
            if (Array.isArray(_data["checkListParams"])) {
                this.checkListParams = [] as any;
                for (let item of _data["checkListParams"])
                    this.checkListParams!.push(CheckListParamDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCheckListItemParamCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCheckListItemParamCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCheckList"] = this.idCheckList;
        data["idCheckListItem"] = this.idCheckListItem;
        if (Array.isArray(this.checkListParams)) {
            data["checkListParams"] = [];
            for (let item of this.checkListParams)
                data["checkListParams"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddCheckListItemParamCommand {
    idCheckList?: number;
    idCheckListItem?: number;
    checkListParams?: CheckListParamDTO[] | undefined;
}

export class UpdateCheckListParamCommand implements IUpdateCheckListParamCommand {
    idCheckList?: number | undefined;
    idCheckListItem?: number | undefined;
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;

    constructor(data?: IUpdateCheckListParamCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCheckList = _data["idCheckList"];
            this.idCheckListItem = _data["idCheckListItem"];
            this.id = _data["id"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateCheckListParamCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCheckListParamCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCheckList"] = this.idCheckList;
        data["idCheckListItem"] = this.idCheckListItem;
        data["id"] = this.id;
        data["key"] = this.key;
        data["value"] = this.value;
        data["type"] = this.type;
        return data; 
    }
}

export interface IUpdateCheckListParamCommand {
    idCheckList?: number | undefined;
    idCheckListItem?: number | undefined;
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;
}

export class UpdateCheckListCommand implements IUpdateCheckListCommand {
    idCheckList?: number;
    text?: string | undefined;
    annotation?: string | undefined;
    isConfiguration?: boolean;

    constructor(data?: IUpdateCheckListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCheckList = _data["idCheckList"];
            this.text = _data["text"];
            this.annotation = _data["annotation"];
            this.isConfiguration = _data["isConfiguration"];
        }
    }

    static fromJS(data: any): UpdateCheckListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCheckListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCheckList"] = this.idCheckList;
        data["text"] = this.text;
        data["annotation"] = this.annotation;
        data["isConfiguration"] = this.isConfiguration;
        return data; 
    }
}

export interface IUpdateCheckListCommand {
    idCheckList?: number;
    text?: string | undefined;
    annotation?: string | undefined;
    isConfiguration?: boolean;
}

export class UpdateCheckListItemCommand implements IUpdateCheckListItemCommand {
    id?: number;
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;

    constructor(data?: IUpdateCheckListItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.checkListId = _data["checkListId"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            this.editable = _data["editable"];
            this.required = _data["required"];
            this.remarks = _data["remarks"];
        }
    }

    static fromJS(data: any): UpdateCheckListItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCheckListItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["checkListId"] = this.checkListId;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["editable"] = this.editable;
        data["required"] = this.required;
        data["remarks"] = this.remarks;
        return data; 
    }
}

export interface IUpdateCheckListItemCommand {
    id?: number;
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
}

export class LicenseDTO implements ILicenseDTO {
    licenseId?: number;
    number?: string | undefined;
    name?: string | undefined;
    personInCharge?: string | undefined;
    contact?: string | undefined;
    email?: string | undefined;
    amp?: number;
    volt?: number;
    kva?: number;
    validityStart?: Date;
    validityEnd?: Date;

    constructor(data?: ILicenseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.licenseId = _data["licenseId"];
            this.number = _data["number"];
            this.name = _data["name"];
            this.personInCharge = _data["personInCharge"];
            this.contact = _data["contact"];
            this.email = _data["email"];
            this.amp = _data["amp"];
            this.volt = _data["volt"];
            this.kva = _data["kva"];
            this.validityStart = _data["validityStart"] ? new Date(_data["validityStart"].toString()) : <any>undefined;
            this.validityEnd = _data["validityEnd"] ? new Date(_data["validityEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LicenseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LicenseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licenseId"] = this.licenseId;
        data["number"] = this.number;
        data["name"] = this.name;
        data["personInCharge"] = this.personInCharge;
        data["contact"] = this.contact;
        data["email"] = this.email;
        data["amp"] = this.amp;
        data["volt"] = this.volt;
        data["kva"] = this.kva;
        data["validityStart"] = this.validityStart ? this.validityStart.toISOString() : <any>undefined;
        data["validityEnd"] = this.validityEnd ? this.validityEnd.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ILicenseDTO {
    licenseId?: number;
    number?: string | undefined;
    name?: string | undefined;
    personInCharge?: string | undefined;
    contact?: string | undefined;
    email?: string | undefined;
    amp?: number;
    volt?: number;
    kva?: number;
    validityStart?: Date;
    validityEnd?: Date;
}

export enum ReportType {
    _0 = 0,
}

export class AddReportConfigurationCommand implements IAddReportConfigurationCommand {
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;

    constructor(data?: IAddReportConfigurationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.formName = _data["formName"];
            this.remarksLabelText = _data["remarksLabelText"];
            if (Array.isArray(_data["checksDefinition"])) {
                this.checksDefinition = [] as any;
                for (let item of _data["checksDefinition"])
                    this.checksDefinition!.push(item);
            }
            if (Array.isArray(_data["signatureDefinitions"])) {
                this.signatureDefinitions = [] as any;
                for (let item of _data["signatureDefinitions"])
                    this.signatureDefinitions!.push(item);
            }
        }
    }

    static fromJS(data: any): AddReportConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddReportConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        if (Array.isArray(this.checksDefinition)) {
            data["checksDefinition"] = [];
            for (let item of this.checksDefinition)
                data["checksDefinition"].push(item);
        }
        if (Array.isArray(this.signatureDefinitions)) {
            data["signatureDefinitions"] = [];
            for (let item of this.signatureDefinitions)
                data["signatureDefinitions"].push(item);
        }
        return data; 
    }
}

export interface IAddReportConfigurationCommand {
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;
}

export class ResumenReportConfiguration implements IResumenReportConfiguration {
    id?: number;
    type?: number;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    definedCheckLists?: number;
    definedSignatures?: number;
    usedByReports?: number;

    constructor(data?: IResumenReportConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.formName = _data["formName"];
            this.remarksLabelText = _data["remarksLabelText"];
            this.definedCheckLists = _data["definedCheckLists"];
            this.definedSignatures = _data["definedSignatures"];
            this.usedByReports = _data["usedByReports"];
        }
    }

    static fromJS(data: any): ResumenReportConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new ResumenReportConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        data["definedCheckLists"] = this.definedCheckLists;
        data["definedSignatures"] = this.definedSignatures;
        data["usedByReports"] = this.usedByReports;
        return data; 
    }
}

export interface IResumenReportConfiguration {
    id?: number;
    type?: number;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    definedCheckLists?: number;
    definedSignatures?: number;
    usedByReports?: number;
}

export class UpdateReportConfigurationCommand implements IUpdateReportConfigurationCommand {
    id?: number;
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;

    constructor(data?: IUpdateReportConfigurationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.formName = _data["formName"];
            this.remarksLabelText = _data["remarksLabelText"];
            if (Array.isArray(_data["checksDefinition"])) {
                this.checksDefinition = [] as any;
                for (let item of _data["checksDefinition"])
                    this.checksDefinition!.push(item);
            }
            if (Array.isArray(_data["signatureDefinitions"])) {
                this.signatureDefinitions = [] as any;
                for (let item of _data["signatureDefinitions"])
                    this.signatureDefinitions!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateReportConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReportConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        if (Array.isArray(this.checksDefinition)) {
            data["checksDefinition"] = [];
            for (let item of this.checksDefinition)
                data["checksDefinition"].push(item);
        }
        if (Array.isArray(this.signatureDefinitions)) {
            data["signatureDefinitions"] = [];
            for (let item of this.signatureDefinitions)
                data["signatureDefinitions"].push(item);
        }
        return data; 
    }
}

export interface IUpdateReportConfigurationCommand {
    id?: number;
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;
}

export class ReportConfigurationDTO implements IReportConfigurationDTO {
    id?: number;
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;

    constructor(data?: IReportConfigurationDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.formName = _data["formName"];
            this.remarksLabelText = _data["remarksLabelText"];
            if (Array.isArray(_data["checksDefinition"])) {
                this.checksDefinition = [] as any;
                for (let item of _data["checksDefinition"])
                    this.checksDefinition!.push(item);
            }
            if (Array.isArray(_data["signatureDefinitions"])) {
                this.signatureDefinitions = [] as any;
                for (let item of _data["signatureDefinitions"])
                    this.signatureDefinitions!.push(item);
            }
        }
    }

    static fromJS(data: any): ReportConfigurationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ReportConfigurationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        if (Array.isArray(this.checksDefinition)) {
            data["checksDefinition"] = [];
            for (let item of this.checksDefinition)
                data["checksDefinition"].push(item);
        }
        if (Array.isArray(this.signatureDefinitions)) {
            data["signatureDefinitions"] = [];
            for (let item of this.signatureDefinitions)
                data["signatureDefinitions"].push(item);
        }
        return data; 
    }
}

export interface IReportConfigurationDTO {
    id?: number;
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: number[] | undefined;
    signatureDefinitions?: number[] | undefined;
}

export class CreateReportCommand implements ICreateReportCommand {
    configurationId?: number;
    reportType?: ReportType;

    constructor(data?: ICreateReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.configurationId = _data["configurationId"];
            this.reportType = _data["reportType"];
        }
    }

    static fromJS(data: any): CreateReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configurationId"] = this.configurationId;
        data["reportType"] = this.reportType;
        return data; 
    }
}

export interface ICreateReportCommand {
    configurationId?: number;
    reportType?: ReportType;
}

export class UpdateReportCommand implements IUpdateReportCommand {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    licenseNumber?: string | undefined;
    date?: Date;
    isClosed?: boolean;

    constructor(data?: IUpdateReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.licenseNumber = _data["licenseNumber"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.isClosed = _data["isClosed"];
        }
    }

    static fromJS(data: any): UpdateReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["licenseNumber"] = this.licenseNumber;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["isClosed"] = this.isClosed;
        return data; 
    }
}

export interface IUpdateReportCommand {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    licenseNumber?: string | undefined;
    date?: Date;
    isClosed?: boolean;
}

export class AddNoteCommand implements IAddNoteCommand {
    reportId?: number;
    text?: string | undefined;
    checked?: boolean;
    readonly needsCheck?: boolean;

    constructor(data?: IAddNoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            (<any>this).needsCheck = _data["needsCheck"];
        }
    }

    static fromJS(data: any): AddNoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddNoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["needsCheck"] = this.needsCheck;
        return data; 
    }
}

export interface IAddNoteCommand {
    reportId?: number;
    text?: string | undefined;
    checked?: boolean;
    needsCheck?: boolean;
}

export class EditNoteCommand implements IEditNoteCommand {
    reportId?: number;
    id?: number;
    text?: string | undefined;
    checked?: boolean;

    constructor(data?: IEditNoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.id = _data["id"];
            this.text = _data["text"];
            this.checked = _data["checked"];
        }
    }

    static fromJS(data: any): EditNoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditNoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["id"] = this.id;
        data["text"] = this.text;
        data["checked"] = this.checked;
        return data; 
    }
}

export interface IEditNoteCommand {
    reportId?: number;
    id?: number;
    text?: string | undefined;
    checked?: boolean;
}

export class EditPhotoRecordCommand implements IEditPhotoRecordCommand {
    readonly reportId?: number;
    id?: number;
    readonly label?: string | undefined;

    constructor(data?: IEditPhotoRecordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).reportId = _data["reportId"];
            this.id = _data["id"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): EditPhotoRecordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditPhotoRecordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["id"] = this.id;
        data["label"] = this.label;
        return data; 
    }
}

export interface IEditPhotoRecordCommand {
    reportId?: number;
    id?: number;
    label?: string | undefined;
}

export enum ResponsableType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class AddSignatureCommand implements IAddSignatureCommand {
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    isConfiguration?: boolean;
    reportId?: number | undefined;
    reportConfigurationId?: number | undefined;

    constructor(data?: IAddSignatureCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.annotation = _data["annotation"];
            this.responsableType = _data["responsableType"];
            this.responsableName = _data["responsableName"];
            this.designation = _data["designation"];
            this.remarks = _data["remarks"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.principal = _data["principal"];
            this.isConfiguration = _data["isConfiguration"];
            this.reportId = _data["reportId"];
            this.reportConfigurationId = _data["reportConfigurationId"];
        }
    }

    static fromJS(data: any): AddSignatureCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddSignatureCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["annotation"] = this.annotation;
        data["responsableType"] = this.responsableType;
        data["responsableName"] = this.responsableName;
        data["designation"] = this.designation;
        data["remarks"] = this.remarks;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["principal"] = this.principal;
        data["isConfiguration"] = this.isConfiguration;
        data["reportId"] = this.reportId;
        data["reportConfigurationId"] = this.reportConfigurationId;
        return data; 
    }
}

export interface IAddSignatureCommand {
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    isConfiguration?: boolean;
    reportId?: number | undefined;
    reportConfigurationId?: number | undefined;
}

export class License implements ILicense {
    number?: string | undefined;
    validity?: DateTimeRange;
    amp?: number;
    volt?: number;
    kva?: number;

    constructor(data?: ILicense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.validity = _data["validity"] ? DateTimeRange.fromJS(_data["validity"]) : <any>undefined;
            this.amp = _data["amp"];
            this.volt = _data["volt"];
            this.kva = _data["kva"];
        }
    }

    static fromJS(data: any): License {
        data = typeof data === 'object' ? data : {};
        let result = new License();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["validity"] = this.validity ? this.validity.toJSON() : <any>undefined;
        data["amp"] = this.amp;
        data["volt"] = this.volt;
        data["kva"] = this.kva;
        return data; 
    }
}

export interface ILicense {
    number?: string | undefined;
    validity?: DateTimeRange;
    amp?: number;
    volt?: number;
    kva?: number;
}

export class Responsable implements IResponsable {
    type?: ResponsableType;
    name?: string | undefined;

    constructor(data?: IResponsable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Responsable {
        data = typeof data === 'object' ? data : {};
        let result = new Responsable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        return data; 
    }
}

export interface IResponsable {
    type?: ResponsableType;
    name?: string | undefined;
}

export class CheckListItem implements ICheckListItem {
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    textParams?: CheckListParam[] | undefined;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: ICheckListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkListId = _data["checkListId"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            this.editable = _data["editable"];
            this.required = _data["required"];
            this.remarks = _data["remarks"];
            if (Array.isArray(_data["textParams"])) {
                this.textParams = [] as any;
                for (let item of _data["textParams"])
                    this.textParams!.push(CheckListParam.fromJS(item));
            }
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CheckListItem {
        data = typeof data === 'object' ? data : {};
        let result = new CheckListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkListId"] = this.checkListId;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["editable"] = this.editable;
        data["required"] = this.required;
        data["remarks"] = this.remarks;
        if (Array.isArray(this.textParams)) {
            data["textParams"] = [];
            for (let item of this.textParams)
                data["textParams"].push(item.toJSON());
        }
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICheckListItem {
    checkListId?: number;
    text?: string | undefined;
    checked?: CheckValue;
    editable?: boolean;
    required?: boolean;
    remarks?: string | undefined;
    textParams?: CheckListParam[] | undefined;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class CheckListParam implements ICheckListParam {
    checkListId?: number | undefined;
    checkListItemId?: number | undefined;
    checkListItem?: CheckListItem;
    checkList?: CheckList;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: ICheckListParam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkListId = _data["checkListId"];
            this.checkListItemId = _data["checkListItemId"];
            this.checkListItem = _data["checkListItem"] ? CheckListItem.fromJS(_data["checkListItem"]) : <any>undefined;
            this.checkList = _data["checkList"] ? CheckList.fromJS(_data["checkList"]) : <any>undefined;
            this.key = _data["key"];
            this.value = _data["value"];
            this.type = _data["type"];
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CheckListParam {
        data = typeof data === 'object' ? data : {};
        let result = new CheckListParam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkListId"] = this.checkListId;
        data["checkListItemId"] = this.checkListItemId;
        data["checkListItem"] = this.checkListItem ? this.checkListItem.toJSON() : <any>undefined;
        data["checkList"] = this.checkList ? this.checkList.toJSON() : <any>undefined;
        data["key"] = this.key;
        data["value"] = this.value;
        data["type"] = this.type;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICheckListParam {
    checkListId?: number | undefined;
    checkListItemId?: number | undefined;
    checkListItem?: CheckListItem;
    checkList?: CheckList;
    key?: string | undefined;
    value?: string | undefined;
    type?: CheckListParamType;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class CheckList implements ICheckList {
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;
    reportConfiguration?: ReportConfiguration;
    readonly text?: string | undefined;
    readonly textParams?: CheckListParam[] | undefined;
    readonly annotation?: string | undefined;
    isConfiguration?: boolean;
    readonly completed?: boolean;
    readonly checked?: boolean;
    readonly checks?: CheckListItem[] | undefined;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: ICheckList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.report = _data["report"] ? Report.fromJS(_data["report"]) : <any>undefined;
            this.reportConfigurationId = _data["reportConfigurationId"];
            this.reportConfiguration = _data["reportConfiguration"] ? ReportConfiguration.fromJS(_data["reportConfiguration"]) : <any>undefined;
            (<any>this).text = _data["text"];
            if (Array.isArray(_data["textParams"])) {
                (<any>this).textParams = [] as any;
                for (let item of _data["textParams"])
                    (<any>this).textParams!.push(CheckListParam.fromJS(item));
            }
            (<any>this).annotation = _data["annotation"];
            this.isConfiguration = _data["isConfiguration"];
            (<any>this).completed = _data["completed"];
            (<any>this).checked = _data["checked"];
            if (Array.isArray(_data["checks"])) {
                (<any>this).checks = [] as any;
                for (let item of _data["checks"])
                    (<any>this).checks!.push(CheckListItem.fromJS(item));
            }
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CheckList {
        data = typeof data === 'object' ? data : {};
        let result = new CheckList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["report"] = this.report ? this.report.toJSON() : <any>undefined;
        data["reportConfigurationId"] = this.reportConfigurationId;
        data["reportConfiguration"] = this.reportConfiguration ? this.reportConfiguration.toJSON() : <any>undefined;
        data["text"] = this.text;
        if (Array.isArray(this.textParams)) {
            data["textParams"] = [];
            for (let item of this.textParams)
                data["textParams"].push(item.toJSON());
        }
        data["annotation"] = this.annotation;
        data["isConfiguration"] = this.isConfiguration;
        data["completed"] = this.completed;
        data["checked"] = this.checked;
        if (Array.isArray(this.checks)) {
            data["checks"] = [];
            for (let item of this.checks)
                data["checks"].push(item.toJSON());
        }
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICheckList {
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;
    reportConfiguration?: ReportConfiguration;
    text?: string | undefined;
    textParams?: CheckListParam[] | undefined;
    annotation?: string | undefined;
    isConfiguration?: boolean;
    completed?: boolean;
    checked?: boolean;
    checks?: CheckListItem[] | undefined;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class ReportConfiguration implements IReportConfiguration {
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: CheckList[] | undefined;
    signatureDefinitions?: Signature[] | undefined;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: IReportConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.formName = _data["formName"];
            this.remarksLabelText = _data["remarksLabelText"];
            if (Array.isArray(_data["checksDefinition"])) {
                this.checksDefinition = [] as any;
                for (let item of _data["checksDefinition"])
                    this.checksDefinition!.push(CheckList.fromJS(item));
            }
            if (Array.isArray(_data["signatureDefinitions"])) {
                this.signatureDefinitions = [] as any;
                for (let item of _data["signatureDefinitions"])
                    this.signatureDefinitions!.push(Signature.fromJS(item));
            }
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new ReportConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        if (Array.isArray(this.checksDefinition)) {
            data["checksDefinition"] = [];
            for (let item of this.checksDefinition)
                data["checksDefinition"].push(item.toJSON());
        }
        if (Array.isArray(this.signatureDefinitions)) {
            data["signatureDefinitions"] = [];
            for (let item of this.signatureDefinitions)
                data["signatureDefinitions"].push(item.toJSON());
        }
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReportConfiguration {
    type?: ReportType;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    checksDefinition?: CheckList[] | undefined;
    signatureDefinitions?: Signature[] | undefined;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class Signature implements ISignature {
    title?: string | undefined;
    annotation?: string | undefined;
    responsable?: Responsable;
    readonly responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    isConfiguration?: boolean;
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;
    reportConfiguration?: ReportConfiguration;
    drawedSign?: string | undefined;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: ISignature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.annotation = _data["annotation"];
            this.responsable = _data["responsable"] ? Responsable.fromJS(_data["responsable"]) : <any>undefined;
            (<any>this).responsableName = _data["responsableName"];
            this.designation = _data["designation"];
            this.remarks = _data["remarks"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.principal = _data["principal"];
            this.isConfiguration = _data["isConfiguration"];
            this.reportId = _data["reportId"];
            this.report = _data["report"] ? Report.fromJS(_data["report"]) : <any>undefined;
            this.reportConfigurationId = _data["reportConfigurationId"];
            this.reportConfiguration = _data["reportConfiguration"] ? ReportConfiguration.fromJS(_data["reportConfiguration"]) : <any>undefined;
            this.drawedSign = _data["drawedSign"];
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Signature {
        data = typeof data === 'object' ? data : {};
        let result = new Signature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["annotation"] = this.annotation;
        data["responsable"] = this.responsable ? this.responsable.toJSON() : <any>undefined;
        data["responsableName"] = this.responsableName;
        data["designation"] = this.designation;
        data["remarks"] = this.remarks;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["principal"] = this.principal;
        data["isConfiguration"] = this.isConfiguration;
        data["reportId"] = this.reportId;
        data["report"] = this.report ? this.report.toJSON() : <any>undefined;
        data["reportConfigurationId"] = this.reportConfigurationId;
        data["reportConfiguration"] = this.reportConfiguration ? this.reportConfiguration.toJSON() : <any>undefined;
        data["drawedSign"] = this.drawedSign;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISignature {
    title?: string | undefined;
    annotation?: string | undefined;
    responsable?: Responsable;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    isConfiguration?: boolean;
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;
    reportConfiguration?: ReportConfiguration;
    drawedSign?: string | undefined;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class Note implements INote {
    reportId?: number;
    text?: string | undefined;
    checked?: boolean;
    needsCheck?: boolean;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: INote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.text = _data["text"];
            this.checked = _data["checked"];
            this.needsCheck = _data["needsCheck"];
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Note {
        data = typeof data === 'object' ? data : {};
        let result = new Note();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["text"] = this.text;
        data["checked"] = this.checked;
        data["needsCheck"] = this.needsCheck;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface INote {
    reportId?: number;
    text?: string | undefined;
    checked?: boolean;
    needsCheck?: boolean;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class PhotoRecord implements IPhotoRecord {
    readonly reportId?: number;
    readonly fileName?: string | undefined;
    readonly fileNameResized?: string | undefined;
    label?: string | undefined;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: IPhotoRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).reportId = _data["reportId"];
            (<any>this).fileName = _data["fileName"];
            (<any>this).fileNameResized = _data["fileNameResized"];
            this.label = _data["label"];
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PhotoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["fileName"] = this.fileName;
        data["fileNameResized"] = this.fileNameResized;
        data["label"] = this.label;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPhotoRecord {
    reportId?: number;
    fileName?: string | undefined;
    fileNameResized?: string | undefined;
    label?: string | undefined;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class Report implements IReport {
    readonly name?: string | undefined;
    readonly address?: string | undefined;
    license?: License;
    readonly date?: Date;
    readonly isClosed?: boolean;
    readonly title?: string | undefined;
    readonly formName?: string | undefined;
    readonly remarksLabelText?: string | undefined;
    readonly signatures?: Signature[] | undefined;
    readonly notes?: Note[] | undefined;
    readonly checkList?: CheckList[] | undefined;
    readonly photoRecords?: PhotoRecord[] | undefined;
    readonly completed?: boolean;
    id?: number;
    readonly domainEvents?: INotification[] | undefined;

    constructor(data?: IReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            (<any>this).address = _data["address"];
            this.license = _data["license"] ? License.fromJS(_data["license"]) : <any>undefined;
            (<any>this).date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            (<any>this).isClosed = _data["isClosed"];
            (<any>this).title = _data["title"];
            (<any>this).formName = _data["formName"];
            (<any>this).remarksLabelText = _data["remarksLabelText"];
            if (Array.isArray(_data["signatures"])) {
                (<any>this).signatures = [] as any;
                for (let item of _data["signatures"])
                    (<any>this).signatures!.push(Signature.fromJS(item));
            }
            if (Array.isArray(_data["notes"])) {
                (<any>this).notes = [] as any;
                for (let item of _data["notes"])
                    (<any>this).notes!.push(Note.fromJS(item));
            }
            if (Array.isArray(_data["checkList"])) {
                (<any>this).checkList = [] as any;
                for (let item of _data["checkList"])
                    (<any>this).checkList!.push(CheckList.fromJS(item));
            }
            if (Array.isArray(_data["photoRecords"])) {
                (<any>this).photoRecords = [] as any;
                for (let item of _data["photoRecords"])
                    (<any>this).photoRecords!.push(PhotoRecord.fromJS(item));
            }
            (<any>this).completed = _data["completed"];
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                (<any>this).domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    (<any>this).domainEvents!.push(INotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Report {
        data = typeof data === 'object' ? data : {};
        let result = new Report();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["license"] = this.license ? this.license.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["isClosed"] = this.isClosed;
        data["title"] = this.title;
        data["formName"] = this.formName;
        data["remarksLabelText"] = this.remarksLabelText;
        if (Array.isArray(this.signatures)) {
            data["signatures"] = [];
            for (let item of this.signatures)
                data["signatures"].push(item.toJSON());
        }
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        if (Array.isArray(this.checkList)) {
            data["checkList"] = [];
            for (let item of this.checkList)
                data["checkList"].push(item.toJSON());
        }
        if (Array.isArray(this.photoRecords)) {
            data["photoRecords"] = [];
            for (let item of this.photoRecords)
                data["photoRecords"].push(item.toJSON());
        }
        data["completed"] = this.completed;
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReport {
    name?: string | undefined;
    address?: string | undefined;
    license?: License;
    date?: Date;
    isClosed?: boolean;
    title?: string | undefined;
    formName?: string | undefined;
    remarksLabelText?: string | undefined;
    signatures?: Signature[] | undefined;
    notes?: Note[] | undefined;
    checkList?: CheckList[] | undefined;
    photoRecords?: PhotoRecord[] | undefined;
    completed?: boolean;
    id?: number;
    domainEvents?: INotification[] | undefined;
}

export class SignatureDTO implements ISignatureDTO {
    id?: number;
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;

    constructor(data?: ISignatureDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.annotation = _data["annotation"];
            this.responsableType = _data["responsableType"];
            this.responsableName = _data["responsableName"];
            this.designation = _data["designation"];
            this.remarks = _data["remarks"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.principal = _data["principal"];
            this.reportId = _data["reportId"];
            this.report = _data["report"] ? Report.fromJS(_data["report"]) : <any>undefined;
            this.reportConfigurationId = _data["reportConfigurationId"];
        }
    }

    static fromJS(data: any): SignatureDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SignatureDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["annotation"] = this.annotation;
        data["responsableType"] = this.responsableType;
        data["responsableName"] = this.responsableName;
        data["designation"] = this.designation;
        data["remarks"] = this.remarks;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["principal"] = this.principal;
        data["reportId"] = this.reportId;
        data["report"] = this.report ? this.report.toJSON() : <any>undefined;
        data["reportConfigurationId"] = this.reportConfigurationId;
        return data; 
    }
}

export interface ISignatureDTO {
    id?: number;
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    reportId?: number | undefined;
    report?: Report;
    reportConfigurationId?: number | undefined;
}

export class EditSignatureCommand implements IEditSignatureCommand {
    id?: number;
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    drawedSign?: string | undefined;

    constructor(data?: IEditSignatureCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.annotation = _data["annotation"];
            this.responsableType = _data["responsableType"];
            this.responsableName = _data["responsableName"];
            this.designation = _data["designation"];
            this.remarks = _data["remarks"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.principal = _data["principal"];
            this.drawedSign = _data["drawedSign"];
        }
    }

    static fromJS(data: any): EditSignatureCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditSignatureCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["annotation"] = this.annotation;
        data["responsableType"] = this.responsableType;
        data["responsableName"] = this.responsableName;
        data["designation"] = this.designation;
        data["remarks"] = this.remarks;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["principal"] = this.principal;
        data["drawedSign"] = this.drawedSign;
        return data; 
    }
}

export interface IEditSignatureCommand {
    id?: number;
    title?: string | undefined;
    annotation?: string | undefined;
    responsableType?: ResponsableType;
    responsableName?: string | undefined;
    designation?: string | undefined;
    remarks?: string | undefined;
    date?: Date;
    principal?: boolean;
    drawedSign?: string | undefined;
}

export class UserDTO implements IUserDTO {
    userName?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    lastEditedReport?: number | undefined;
    isAdmin?: boolean;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.lastEditedReport = _data["lastEditedReport"];
            this.isAdmin = _data["isAdmin"];
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["lastEditedReport"] = this.lastEditedReport;
        data["isAdmin"] = this.isAdmin;
        return data; 
    }
}

export interface IUserDTO {
    userName?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    lastEditedReport?: number | undefined;
    isAdmin?: boolean;
}

export class User implements IUser {
    userName?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    password?: string | undefined;
    lastEditedReport?: number | undefined;
    isAdmin?: boolean;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.password = _data["password"];
            this.lastEditedReport = _data["lastEditedReport"];
            this.isAdmin = _data["isAdmin"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["password"] = this.password;
        data["lastEditedReport"] = this.lastEditedReport;
        data["isAdmin"] = this.isAdmin;
        return data; 
    }
}

export interface IUser {
    userName?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    password?: string | undefined;
    lastEditedReport?: number | undefined;
    isAdmin?: boolean;
}

export class ChangePasswordDTO implements IChangePasswordDTO {
    userName?: string | undefined;
    currentPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordConfirmation?: string | undefined;

    constructor(data?: IChangePasswordDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
            this.newPasswordConfirmation = _data["newPasswordConfirmation"];
        }
    }

    static fromJS(data: any): ChangePasswordDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        data["newPasswordConfirmation"] = this.newPasswordConfirmation;
        return data; 
    }
}

export interface IChangePasswordDTO {
    userName?: string | undefined;
    currentPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordConfirmation?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}